import React from "react";
import { observer } from "mobx-react";
import { Card, List, Tooltip, Badge } from "antd";
import { DatatypesTestEntity } from "../../jmix/entities/scr_DatatypesTestEntity";
import {EntityInstance, getDateProperty } from "@haulmont/jmix-react-core";
import {registerScreen} from "@haulmont/jmix-react-web";
import {
  Calendar,
  Spinner,
  RetryDialog,
  useCalendar
} from "@haulmont/jmix-react-antd";
import { gql } from "@apollo/client";

const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const TITLE_PROPERTY_NAME = '<%= titleAttr %>';
const DESCRIPTION_PROPERTY_NAME = '<%= descriptionAttrAnswer %>';
const EVENT_START_PROPERTY_NAME = '<%= eventStartAttr %>';
const EVENT_END_PROPERTY_NAME = '<%= eventEndAttr %>';

const <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST = gql`
  query <%= dollarsToUnderscores(entity.name) %>List($limit: Int, $offset: Int, $orderBy: inp_<%= dollarsToUnderscores(entity.name) %>OrderBy, $filter: [inp_<%= dollarsToUnderscores(entity.name) %>FilterCondition]) {
    <%= dollarsToUnderscores(entity.name) %>Count(filter: $filter)
    <%= dollarsToUnderscores(entity.name) %>List(limit: $limit, offset: $offset, orderBy: $orderBy, filter: $filter) <%= query -%>
  }
`;

interface CalendarItemProps {
  item: EntityInstance<<%= entity.className %>>;
}

const CalendarItem = ({ item }: CalendarItemProps) => (
  <Tooltip title={item[DESCRIPTION_PROPERTY_NAME]}>
    <Badge status="default" text={item[TITLE_PROPERTY_NAME]} />
  </Tooltip>
);

const <%= className %> = observer(() => {
  const {
    items,
    executeListQuery,
    listQueryResult: { loading, error },
    currentMonthDayjs,
    handleCalendarPaginationChange
  } = useCalendar<<%= entity.className %>>({
    listQuery: <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST,
    entityName: ENTITY_NAME,
    routingPath: ROUTING_PATH,
    eventStartPropertyName: EVENT_START_PROPERTY_NAME,
    eventEndPropertyName: EVENT_END_PROPERTY_NAME,
  });

  if (error != null) {
    console.error(error);
    return <RetryDialog onRetry={executeListQuery} />;
  }

  if (loading || items == null) {
    return <Spinner />;
  }

  return (
    <Card>
      <Calendar
        mode="month"
        value={currentMonthDayjs}
        dateCellRender={date => (
          <List size="small">
            {items
              .filter(item => {
                const eventStart = getDateProperty<<%= entity.className %>>(ENTITY_NAME, item, EVENT_START_PROPERTY_NAME);
                const eventEnd = getDateProperty<<%= entity.className %>>(ENTITY_NAME, item, EVENT_END_PROPERTY_NAME);

                return date.isAfter(eventStart?.startOf('day'))
                  && date.isBefore(eventEnd?.endOf('day'));
              })
              .map(item => (
                <List.Item key={item.id}>
                  <CalendarItem item={item} />
                </List.Item>
              ))
            }
          </List>
        )}
        onPanelChange={handleCalendarPaginationChange}
      />
    </Card>
  )
});

registerScreen({
  component: <%= className %>,
  caption: 'screen.<%= className %>',
  screenId: '<%= className %>',
  menuOptions: {
    pathPattern: ROUTING_PATH,
    menuLink: ROUTING_PATH,
  }
});

export default <%= className %>;
