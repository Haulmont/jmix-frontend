# This file was generated based on "Jmix model". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type CarDto {
    garage: scr_Garage
    id: UUID
    manufacturer: String
    model: String
    price: BigDecimal
}

"Mutation root"
type Mutation {
    createProduct(manufacturer: String!, model: String, price: BigDecimal): scr_Product
    delete_scr_AssociationM2MTestEntity(id: String!): Void
    delete_scr_AssociationM2OTestEntity(id: String!): Void
    delete_scr_AssociationO2MTestEntity(id: String!): Void
    delete_scr_AssociationO2OTestEntity(id: String!): Void
    delete_scr_BoringStringIdTestEntity(id: String!): Void
    delete_scr_Car(id: String!): Void
    delete_scr_CarRent(id: String!): Void
    delete_scr_CompositionO2MTestEntity(id: String!): Void
    delete_scr_CompositionO2OTestEntity(id: String!): Void
    delete_scr_Customer(id: String!): Void
    delete_scr_DatatypesTestEntity(id: String!): Void
    delete_scr_DatatypesTestEntity2(id: String!): Void
    delete_scr_DatatypesTestEntity3(id: String!): Void
    delete_scr_DeeplyNestedO2MTestEntity(id: String!): Void
    delete_scr_DeeplyNestedTestEntity(id: String!): Void
    delete_scr_FavoriteCar(id: String!): Void
    delete_scr_FormWizardAssociationO2OTestEntity(id: String!): Void
    delete_scr_FormWizardCompositionO2OTestEntity(id: String!): Void
    delete_scr_FormWizardTestEntity(id: String!): Void
    delete_scr_Garage(id: String!): Void
    delete_scr_IntIdentityIdTestEntity(id: String!): Void
    delete_scr_IntegerIdTestEntity(id: String!): Void
    delete_scr_Order(id: String!): Void
    delete_scr_OrderLine(id: String!): Void
    delete_scr_Product(id: String!): Void
    delete_scr_SparePart(id: String!): Void
    delete_scr_StringIdTestEntity(id: String!): Void
    delete_scr_TechnicalCertificate(id: String!): Void
    delete_scr_TrickyIdTestEntity(id: String!): Void
    delete_scr_User(id: String!): Void
    delete_scr_WeirdStringIdTestEntity(id: String!): Void
    delete_sec_ResourcePolicyEntity(id: String!): Void
    delete_sec_ResourceRoleEntity(id: String!): Void
    delete_sec_RoleAssignmentEntity(id: String!): Void
    delete_sec_RowLevelPolicyEntity(id: String!): Void
    delete_sec_RowLevelRoleEntity(id: String!): Void
    delete_ui_FilterConfiguration(id: String!): Void
    delete_ui_Setting(id: String!): Void
    delete_ui_TablePresentation(id: String!): Void
    upsert_scr_AssociationM2MTestEntity(associationM2MTestEntity: inp_scr_AssociationM2MTestEntity!): scr_AssociationM2MTestEntity
    upsert_scr_AssociationM2OTestEntity(associationM2OTestEntity: inp_scr_AssociationM2OTestEntity!): scr_AssociationM2OTestEntity
    upsert_scr_AssociationO2MTestEntity(associationO2MTestEntity: inp_scr_AssociationO2MTestEntity!): scr_AssociationO2MTestEntity
    upsert_scr_AssociationO2OTestEntity(associationO2OTestEntity: inp_scr_AssociationO2OTestEntity!): scr_AssociationO2OTestEntity
    upsert_scr_BoringStringIdTestEntity(boringStringIdTestEntity: inp_scr_BoringStringIdTestEntity!): scr_BoringStringIdTestEntity
    upsert_scr_Car(car: inp_scr_Car!): scr_Car
    upsert_scr_CarRent(carRent: inp_scr_CarRent!): scr_CarRent
    upsert_scr_CompositionO2MTestEntity(compositionO2MTestEntity: inp_scr_CompositionO2MTestEntity!): scr_CompositionO2MTestEntity
    upsert_scr_CompositionO2OTestEntity(compositionO2OTestEntity: inp_scr_CompositionO2OTestEntity!): scr_CompositionO2OTestEntity
    upsert_scr_Customer(customer: inp_scr_Customer!): scr_Customer
    upsert_scr_DatatypesTestEntity(datatypesTestEntity: inp_scr_DatatypesTestEntity!): scr_DatatypesTestEntity
    upsert_scr_DatatypesTestEntity2(datatypesTestEntity2: inp_scr_DatatypesTestEntity2!): scr_DatatypesTestEntity2
    upsert_scr_DatatypesTestEntity3(datatypesTestEntity3: inp_scr_DatatypesTestEntity3!): scr_DatatypesTestEntity3
    upsert_scr_DeeplyNestedO2MTestEntity(deeplyNestedO2MTestEntity: inp_scr_DeeplyNestedO2MTestEntity!): scr_DeeplyNestedO2MTestEntity
    upsert_scr_DeeplyNestedTestEntity(deeplyNestedTestEntity: inp_scr_DeeplyNestedTestEntity!): scr_DeeplyNestedTestEntity
    upsert_scr_FavoriteCar(favoriteCar: inp_scr_FavoriteCar!): scr_FavoriteCar
    upsert_scr_FormWizardAssociationO2OTestEntity(formWizardAssociationO2OTestEntity: inp_scr_FormWizardAssociationO2OTestEntity!): scr_FormWizardAssociationO2OTestEntity
    upsert_scr_FormWizardCompositionO2OTestEntity(formWizardCompositionO2OTestEntity: inp_scr_FormWizardCompositionO2OTestEntity!): scr_FormWizardCompositionO2OTestEntity
    upsert_scr_FormWizardTestEntity(formWizardTestEntity: inp_scr_FormWizardTestEntity!): scr_FormWizardTestEntity
    upsert_scr_Garage(garage: inp_scr_Garage!): scr_Garage
    upsert_scr_IntIdentityIdTestEntity(intIdentityIdTestEntity: inp_scr_IntIdentityIdTestEntity!): scr_IntIdentityIdTestEntity
    upsert_scr_IntegerIdTestEntity(integerIdTestEntity: inp_scr_IntegerIdTestEntity!): scr_IntegerIdTestEntity
    upsert_scr_Order(order: inp_scr_Order!): scr_Order
    upsert_scr_OrderLine(orderLine: inp_scr_OrderLine!): scr_OrderLine
    upsert_scr_Product(product: inp_scr_Product!): scr_Product
    upsert_scr_SparePart(sparePart: inp_scr_SparePart!): scr_SparePart
    upsert_scr_StringIdTestEntity(stringIdTestEntity: inp_scr_StringIdTestEntity!): scr_StringIdTestEntity
    upsert_scr_TechnicalCertificate(technicalCertificate: inp_scr_TechnicalCertificate!): scr_TechnicalCertificate
    upsert_scr_TrickyIdTestEntity(trickyIdTestEntity: inp_scr_TrickyIdTestEntity!): scr_TrickyIdTestEntity
    upsert_scr_User(user: inp_scr_User!): scr_User
    upsert_scr_WeirdStringIdTestEntity(weirdStringIdTestEntity: inp_scr_WeirdStringIdTestEntity!): scr_WeirdStringIdTestEntity
    upsert_sec_ResourcePolicyEntity(resourcePolicyEntity: inp_sec_ResourcePolicyEntity!): sec_ResourcePolicyEntity
    upsert_sec_ResourceRoleEntity(resourceRoleEntity: inp_sec_ResourceRoleEntity!): sec_ResourceRoleEntity
    upsert_sec_RoleAssignmentEntity(roleAssignmentEntity: inp_sec_RoleAssignmentEntity!): sec_RoleAssignmentEntity
    upsert_sec_RowLevelPolicyEntity(rowLevelPolicyEntity: inp_sec_RowLevelPolicyEntity!): sec_RowLevelPolicyEntity
    upsert_sec_RowLevelRoleEntity(rowLevelRoleEntity: inp_sec_RowLevelRoleEntity!): sec_RowLevelRoleEntity
    upsert_ui_FilterConfiguration(filterConfiguration: inp_ui_FilterConfiguration!): ui_FilterConfiguration
    upsert_ui_Setting(uiSetting: inp_ui_Setting!): ui_Setting
    upsert_ui_TablePresentation(uiTablePresentation: inp_ui_TablePresentation!): ui_TablePresentation
}

"Query root"
type Query {
    carDtoList: [CarDto]
    entityMessages(className: String, locale: String): [gql_MessageDetail]
    enumMessages(className: String, locale: String): [gql_MessageDetail]
    orders(order: String = "amount"): [scr_Order]
    permissions: sec_PermissionConfig
    scr_AssociationM2MTestEntityById(id: String!): scr_AssociationM2MTestEntity
    scr_AssociationM2MTestEntityCount(
        "expressions to compare scr_AssociationM2MTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_AssociationM2MTestEntityFilterCondition]
    ): Long
    scr_AssociationM2MTestEntityList(
        "expressions to compare scr_AssociationM2MTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_AssociationM2MTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_AssociationM2MTestEntityOrderBy
    ): [scr_AssociationM2MTestEntity]
    scr_AssociationM2OTestEntityById(id: String!): scr_AssociationM2OTestEntity
    scr_AssociationM2OTestEntityCount(
        "expressions to compare scr_AssociationM2OTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_AssociationM2OTestEntityFilterCondition]
    ): Long
    scr_AssociationM2OTestEntityList(
        "expressions to compare scr_AssociationM2OTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_AssociationM2OTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_AssociationM2OTestEntityOrderBy
    ): [scr_AssociationM2OTestEntity]
    scr_AssociationO2MTestEntityById(id: String!): scr_AssociationO2MTestEntity
    scr_AssociationO2MTestEntityCount(
        "expressions to compare scr_AssociationO2MTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_AssociationO2MTestEntityFilterCondition]
    ): Long
    scr_AssociationO2MTestEntityList(
        "expressions to compare scr_AssociationO2MTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_AssociationO2MTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_AssociationO2MTestEntityOrderBy
    ): [scr_AssociationO2MTestEntity]
    scr_AssociationO2OTestEntityById(id: String!): scr_AssociationO2OTestEntity
    scr_AssociationO2OTestEntityCount(
        "expressions to compare scr_AssociationO2OTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_AssociationO2OTestEntityFilterCondition]
    ): Long
    scr_AssociationO2OTestEntityList(
        "expressions to compare scr_AssociationO2OTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_AssociationO2OTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_AssociationO2OTestEntityOrderBy
    ): [scr_AssociationO2OTestEntity]
    scr_BoringStringIdTestEntityById(id: String!): scr_BoringStringIdTestEntity
    scr_BoringStringIdTestEntityCount(
        "expressions to compare scr_BoringStringIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_BoringStringIdTestEntityFilterCondition]
    ): Long
    scr_BoringStringIdTestEntityList(
        "expressions to compare scr_BoringStringIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_BoringStringIdTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_BoringStringIdTestEntityOrderBy
    ): [scr_BoringStringIdTestEntity]
    scr_CarById(id: String!): scr_Car
    scr_CarCount(
        "expressions to compare scr_Car objects, all items are combined with logical 'AND'"
        filter: [inp_scr_CarFilterCondition]
    ): Long
    scr_CarList(
        "expressions to compare scr_Car objects, all items are combined with logical 'AND'"
        filter: [inp_scr_CarFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_CarOrderBy
    ): [scr_Car]
    scr_CarRentById(id: String!): scr_CarRent
    scr_CarRentCount(
        "expressions to compare scr_CarRent objects, all items are combined with logical 'AND'"
        filter: [inp_scr_CarRentFilterCondition]
    ): Long
    scr_CarRentList(
        "expressions to compare scr_CarRent objects, all items are combined with logical 'AND'"
        filter: [inp_scr_CarRentFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_CarRentOrderBy
    ): [scr_CarRent]
    scr_CompositionO2MTestEntityById(id: String!): scr_CompositionO2MTestEntity
    scr_CompositionO2MTestEntityCount(
        "expressions to compare scr_CompositionO2MTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_CompositionO2MTestEntityFilterCondition]
    ): Long
    scr_CompositionO2MTestEntityList(
        "expressions to compare scr_CompositionO2MTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_CompositionO2MTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_CompositionO2MTestEntityOrderBy
    ): [scr_CompositionO2MTestEntity]
    scr_CompositionO2OTestEntityById(id: String!): scr_CompositionO2OTestEntity
    scr_CompositionO2OTestEntityCount(
        "expressions to compare scr_CompositionO2OTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_CompositionO2OTestEntityFilterCondition]
    ): Long
    scr_CompositionO2OTestEntityList(
        "expressions to compare scr_CompositionO2OTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_CompositionO2OTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_CompositionO2OTestEntityOrderBy
    ): [scr_CompositionO2OTestEntity]
    scr_CustomerById(id: String!): scr_Customer
    scr_CustomerCount(
        "expressions to compare scr_Customer objects, all items are combined with logical 'AND'"
        filter: [inp_scr_CustomerFilterCondition]
    ): Long
    scr_CustomerList(
        "expressions to compare scr_Customer objects, all items are combined with logical 'AND'"
        filter: [inp_scr_CustomerFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_CustomerOrderBy
    ): [scr_Customer]
    scr_DatatypesTestEntity2ById(id: String!): scr_DatatypesTestEntity2
    scr_DatatypesTestEntity2Count(
        "expressions to compare scr_DatatypesTestEntity2 objects, all items are combined with logical 'AND'"
        filter: [inp_scr_DatatypesTestEntity2FilterCondition]
    ): Long
    scr_DatatypesTestEntity2List(
        "expressions to compare scr_DatatypesTestEntity2 objects, all items are combined with logical 'AND'"
        filter: [inp_scr_DatatypesTestEntity2FilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_DatatypesTestEntity2OrderBy
    ): [scr_DatatypesTestEntity2]
    scr_DatatypesTestEntity3ById(id: String!): scr_DatatypesTestEntity3
    scr_DatatypesTestEntity3Count(
        "expressions to compare scr_DatatypesTestEntity3 objects, all items are combined with logical 'AND'"
        filter: [inp_scr_DatatypesTestEntity3FilterCondition]
    ): Long
    scr_DatatypesTestEntity3List(
        "expressions to compare scr_DatatypesTestEntity3 objects, all items are combined with logical 'AND'"
        filter: [inp_scr_DatatypesTestEntity3FilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_DatatypesTestEntity3OrderBy
    ): [scr_DatatypesTestEntity3]
    scr_DatatypesTestEntityById(id: String!): scr_DatatypesTestEntity
    scr_DatatypesTestEntityCount(
        "expressions to compare scr_DatatypesTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_DatatypesTestEntityFilterCondition]
    ): Long
    scr_DatatypesTestEntityList(
        "expressions to compare scr_DatatypesTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_DatatypesTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_DatatypesTestEntityOrderBy
    ): [scr_DatatypesTestEntity]
    scr_DeeplyNestedO2MTestEntityById(id: String!): scr_DeeplyNestedO2MTestEntity
    scr_DeeplyNestedO2MTestEntityCount(
        "expressions to compare scr_DeeplyNestedO2MTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_DeeplyNestedO2MTestEntityFilterCondition]
    ): Long
    scr_DeeplyNestedO2MTestEntityList(
        "expressions to compare scr_DeeplyNestedO2MTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_DeeplyNestedO2MTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_DeeplyNestedO2MTestEntityOrderBy
    ): [scr_DeeplyNestedO2MTestEntity]
    scr_DeeplyNestedTestEntityById(id: String!): scr_DeeplyNestedTestEntity
    scr_DeeplyNestedTestEntityCount(
        "expressions to compare scr_DeeplyNestedTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_DeeplyNestedTestEntityFilterCondition]
    ): Long
    scr_DeeplyNestedTestEntityList(
        "expressions to compare scr_DeeplyNestedTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_DeeplyNestedTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_DeeplyNestedTestEntityOrderBy
    ): [scr_DeeplyNestedTestEntity]
    scr_FavoriteCarById(id: String!): scr_FavoriteCar
    scr_FavoriteCarCount(
        "expressions to compare scr_FavoriteCar objects, all items are combined with logical 'AND'"
        filter: [inp_scr_FavoriteCarFilterCondition]
    ): Long
    scr_FavoriteCarList(
        "expressions to compare scr_FavoriteCar objects, all items are combined with logical 'AND'"
        filter: [inp_scr_FavoriteCarFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_FavoriteCarOrderBy
    ): [scr_FavoriteCar]
    scr_FormWizardAssociationO2OTestEntityById(id: String!): scr_FormWizardAssociationO2OTestEntity
    scr_FormWizardAssociationO2OTestEntityCount(
        "expressions to compare scr_FormWizardAssociationO2OTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_FormWizardAssociationO2OTestEntityFilterCondition]
    ): Long
    scr_FormWizardAssociationO2OTestEntityList(
        "expressions to compare scr_FormWizardAssociationO2OTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_FormWizardAssociationO2OTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_FormWizardAssociationO2OTestEntityOrderBy
    ): [scr_FormWizardAssociationO2OTestEntity]
    scr_FormWizardCompositionO2OTestEntityById(id: String!): scr_FormWizardCompositionO2OTestEntity
    scr_FormWizardCompositionO2OTestEntityCount(
        "expressions to compare scr_FormWizardCompositionO2OTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_FormWizardCompositionO2OTestEntityFilterCondition]
    ): Long
    scr_FormWizardCompositionO2OTestEntityList(
        "expressions to compare scr_FormWizardCompositionO2OTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_FormWizardCompositionO2OTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_FormWizardCompositionO2OTestEntityOrderBy
    ): [scr_FormWizardCompositionO2OTestEntity]
    scr_FormWizardTestEntityById(id: String!): scr_FormWizardTestEntity
    scr_FormWizardTestEntityCount(
        "expressions to compare scr_FormWizardTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_FormWizardTestEntityFilterCondition]
    ): Long
    scr_FormWizardTestEntityList(
        "expressions to compare scr_FormWizardTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_FormWizardTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_FormWizardTestEntityOrderBy
    ): [scr_FormWizardTestEntity]
    scr_GarageById(id: String!): scr_Garage
    scr_GarageCount(
        "expressions to compare scr_Garage objects, all items are combined with logical 'AND'"
        filter: [inp_scr_GarageFilterCondition]
    ): Long
    scr_GarageList(
        "expressions to compare scr_Garage objects, all items are combined with logical 'AND'"
        filter: [inp_scr_GarageFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_GarageOrderBy
    ): [scr_Garage]
    scr_IntIdentityIdTestEntityById(id: String!): scr_IntIdentityIdTestEntity
    scr_IntIdentityIdTestEntityCount(
        "expressions to compare scr_IntIdentityIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_IntIdentityIdTestEntityFilterCondition]
    ): Long
    scr_IntIdentityIdTestEntityList(
        "expressions to compare scr_IntIdentityIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_IntIdentityIdTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_IntIdentityIdTestEntityOrderBy
    ): [scr_IntIdentityIdTestEntity]
    scr_IntegerIdTestEntityById(id: String!): scr_IntegerIdTestEntity
    scr_IntegerIdTestEntityCount(
        "expressions to compare scr_IntegerIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_IntegerIdTestEntityFilterCondition]
    ): Long
    scr_IntegerIdTestEntityList(
        "expressions to compare scr_IntegerIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_IntegerIdTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_IntegerIdTestEntityOrderBy
    ): [scr_IntegerIdTestEntity]
    scr_OrderById(id: String!): scr_Order
    scr_OrderCount(
        "expressions to compare scr_Order objects, all items are combined with logical 'AND'"
        filter: [inp_scr_OrderFilterCondition]
    ): Long
    scr_OrderLineById(id: String!): scr_OrderLine
    scr_OrderLineCount(
        "expressions to compare scr_OrderLine objects, all items are combined with logical 'AND'"
        filter: [inp_scr_OrderLineFilterCondition]
    ): Long
    scr_OrderLineList(
        "expressions to compare scr_OrderLine objects, all items are combined with logical 'AND'"
        filter: [inp_scr_OrderLineFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_OrderLineOrderBy
    ): [scr_OrderLine]
    scr_OrderList(
        "expressions to compare scr_Order objects, all items are combined with logical 'AND'"
        filter: [inp_scr_OrderFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_OrderOrderBy
    ): [scr_Order]
    scr_ProductById(id: String!): scr_Product
    scr_ProductCount(
        "expressions to compare scr_Product objects, all items are combined with logical 'AND'"
        filter: [inp_scr_ProductFilterCondition]
    ): Long
    scr_ProductList(
        "expressions to compare scr_Product objects, all items are combined with logical 'AND'"
        filter: [inp_scr_ProductFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_ProductOrderBy
    ): [scr_Product]
    scr_SparePartById(id: String!): scr_SparePart
    scr_SparePartCount(
        "expressions to compare scr_SparePart objects, all items are combined with logical 'AND'"
        filter: [inp_scr_SparePartFilterCondition]
    ): Long
    scr_SparePartList(
        "expressions to compare scr_SparePart objects, all items are combined with logical 'AND'"
        filter: [inp_scr_SparePartFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_SparePartOrderBy
    ): [scr_SparePart]
    scr_StringIdTestEntityById(id: String!): scr_StringIdTestEntity
    scr_StringIdTestEntityCount(
        "expressions to compare scr_StringIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_StringIdTestEntityFilterCondition]
    ): Long
    scr_StringIdTestEntityList(
        "expressions to compare scr_StringIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_StringIdTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_StringIdTestEntityOrderBy
    ): [scr_StringIdTestEntity]
    scr_TechnicalCertificateById(id: String!): scr_TechnicalCertificate
    scr_TechnicalCertificateCount(
        "expressions to compare scr_TechnicalCertificate objects, all items are combined with logical 'AND'"
        filter: [inp_scr_TechnicalCertificateFilterCondition]
    ): Long
    scr_TechnicalCertificateList(
        "expressions to compare scr_TechnicalCertificate objects, all items are combined with logical 'AND'"
        filter: [inp_scr_TechnicalCertificateFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_TechnicalCertificateOrderBy
    ): [scr_TechnicalCertificate]
    scr_TrickyIdTestEntityById(id: String!): scr_TrickyIdTestEntity
    scr_TrickyIdTestEntityCount(
        "expressions to compare scr_TrickyIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_TrickyIdTestEntityFilterCondition]
    ): Long
    scr_TrickyIdTestEntityList(
        "expressions to compare scr_TrickyIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_TrickyIdTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_TrickyIdTestEntityOrderBy
    ): [scr_TrickyIdTestEntity]
    scr_UserById(id: String!): scr_User
    scr_UserCount(
        "expressions to compare scr_User objects, all items are combined with logical 'AND'"
        filter: [inp_scr_UserFilterCondition]
    ): Long
    scr_UserList(
        "expressions to compare scr_User objects, all items are combined with logical 'AND'"
        filter: [inp_scr_UserFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_UserOrderBy
    ): [scr_User]
    scr_WeirdStringIdTestEntityById(id: String!): scr_WeirdStringIdTestEntity
    scr_WeirdStringIdTestEntityCount(
        "expressions to compare scr_WeirdStringIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_WeirdStringIdTestEntityFilterCondition]
    ): Long
    scr_WeirdStringIdTestEntityList(
        "expressions to compare scr_WeirdStringIdTestEntity objects, all items are combined with logical 'AND'"
        filter: [inp_scr_WeirdStringIdTestEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_scr_WeirdStringIdTestEntityOrderBy
    ): [scr_WeirdStringIdTestEntity]
    sec_ResourcePolicyEntityById(id: String!): sec_ResourcePolicyEntity
    sec_ResourcePolicyEntityCount(
        "expressions to compare sec_ResourcePolicyEntity objects, all items are combined with logical 'AND'"
        filter: [inp_sec_ResourcePolicyEntityFilterCondition]
    ): Long
    sec_ResourcePolicyEntityList(
        "expressions to compare sec_ResourcePolicyEntity objects, all items are combined with logical 'AND'"
        filter: [inp_sec_ResourcePolicyEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_sec_ResourcePolicyEntityOrderBy
    ): [sec_ResourcePolicyEntity]
    sec_ResourceRoleEntityById(id: String!): sec_ResourceRoleEntity
    sec_ResourceRoleEntityCount(
        "expressions to compare sec_ResourceRoleEntity objects, all items are combined with logical 'AND'"
        filter: [inp_sec_ResourceRoleEntityFilterCondition]
    ): Long
    sec_ResourceRoleEntityList(
        "expressions to compare sec_ResourceRoleEntity objects, all items are combined with logical 'AND'"
        filter: [inp_sec_ResourceRoleEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_sec_ResourceRoleEntityOrderBy
    ): [sec_ResourceRoleEntity]
    sec_RoleAssignmentEntityById(id: String!): sec_RoleAssignmentEntity
    sec_RoleAssignmentEntityCount(
        "expressions to compare sec_RoleAssignmentEntity objects, all items are combined with logical 'AND'"
        filter: [inp_sec_RoleAssignmentEntityFilterCondition]
    ): Long
    sec_RoleAssignmentEntityList(
        "expressions to compare sec_RoleAssignmentEntity objects, all items are combined with logical 'AND'"
        filter: [inp_sec_RoleAssignmentEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_sec_RoleAssignmentEntityOrderBy
    ): [sec_RoleAssignmentEntity]
    sec_RowLevelPolicyEntityById(id: String!): sec_RowLevelPolicyEntity
    sec_RowLevelPolicyEntityCount(
        "expressions to compare sec_RowLevelPolicyEntity objects, all items are combined with logical 'AND'"
        filter: [inp_sec_RowLevelPolicyEntityFilterCondition]
    ): Long
    sec_RowLevelPolicyEntityList(
        "expressions to compare sec_RowLevelPolicyEntity objects, all items are combined with logical 'AND'"
        filter: [inp_sec_RowLevelPolicyEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_sec_RowLevelPolicyEntityOrderBy
    ): [sec_RowLevelPolicyEntity]
    sec_RowLevelRoleEntityById(id: String!): sec_RowLevelRoleEntity
    sec_RowLevelRoleEntityCount(
        "expressions to compare sec_RowLevelRoleEntity objects, all items are combined with logical 'AND'"
        filter: [inp_sec_RowLevelRoleEntityFilterCondition]
    ): Long
    sec_RowLevelRoleEntityList(
        "expressions to compare sec_RowLevelRoleEntity objects, all items are combined with logical 'AND'"
        filter: [inp_sec_RowLevelRoleEntityFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_sec_RowLevelRoleEntityOrderBy
    ): [sec_RowLevelRoleEntity]
    ui_FilterConfigurationById(id: String!): ui_FilterConfiguration
    ui_FilterConfigurationCount(
        "expressions to compare ui_FilterConfiguration objects, all items are combined with logical 'AND'"
        filter: [inp_ui_FilterConfigurationFilterCondition]
    ): Long
    ui_FilterConfigurationList(
        "expressions to compare ui_FilterConfiguration objects, all items are combined with logical 'AND'"
        filter: [inp_ui_FilterConfigurationFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_ui_FilterConfigurationOrderBy
    ): [ui_FilterConfiguration]
    ui_SettingById(id: String!): ui_Setting
    ui_SettingCount(
        "expressions to compare ui_Setting objects, all items are combined with logical 'AND'"
        filter: [inp_ui_SettingFilterCondition]
    ): Long
    ui_SettingList(
        "expressions to compare ui_Setting objects, all items are combined with logical 'AND'"
        filter: [inp_ui_SettingFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_ui_SettingOrderBy
    ): [ui_Setting]
    ui_TablePresentationById(id: String!): ui_TablePresentation
    ui_TablePresentationCount(
        "expressions to compare ui_TablePresentation objects, all items are combined with logical 'AND'"
        filter: [inp_ui_TablePresentationFilterCondition]
    ): Long
    ui_TablePresentationList(
        "expressions to compare ui_TablePresentation objects, all items are combined with logical 'AND'"
        filter: [inp_ui_TablePresentationFilterCondition],
        "limit the number of items returned"
        limit: Int,
        "skip the first n items"
        offset: Int,
        "sort the items by one or more fields"
        orderBy: inp_ui_TablePresentationOrderBy
    ): [ui_TablePresentation]
    userInfo: UserInfo
}

"Subscription root"
type Subscription {
    newCarAdded(manufacturer: String): scr_Car
}

type UserInfo {
    locale: String
    username: String
}

type gql_MessageDetail {
    key: String
    value: String
}

type scr_AssociationM2MTestEntity {
    _instanceName: String
    datatypesTestEntities: [scr_DatatypesTestEntity]
    id: UUID
    name: String
}

type scr_AssociationM2OTestEntity {
    _instanceName: String
    id: UUID
    name: String
}

type scr_AssociationO2MTestEntity {
    _instanceName: String
    datatypesTestEntity: scr_DatatypesTestEntity
    id: UUID
    name: String
}

type scr_AssociationO2OTestEntity {
    _instanceName: String
    datatypesTestEntity: scr_DatatypesTestEntity
    deeplyNestedTestEntity: scr_DeeplyNestedTestEntity
    id: UUID
    name: String
}

type scr_BoringStringIdTestEntity {
    _instanceName: String
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: String
    updateTs: DateTime
    updatedBy: String
    uuid: UUID
    version: Int
}

type scr_Car {
    _instanceName: String
    carType: CarType
    createdBy: String
    createdDate: Date
    ecoRank: EcoRank
    garage: scr_Garage
    id: UUID
    lastModifiedBy: String
    lastModifiedDate: Date
    manufactureDate: DateTime
    manufacturer: String
    maxPassengers: Int
    mileage: Float
    model: String
    photo: String
    price: BigDecimal
    purchaseDate: Date
    regNumber: String
    technicalCertificate: scr_TechnicalCertificate
    version: Int
    wheelOnRight: Boolean
}

type scr_CarRent {
    _instanceName: String
    car: scr_Car
    fromDate: Date
    fromDateTime: DateTime
    fromTime: Time
    id: UUID
}

type scr_CompositionO2MTestEntity {
    _instanceName: String
    datatypesTestEntity: scr_DatatypesTestEntity
    deeplyNestedO2Mattr: [scr_DeeplyNestedO2MTestEntity]
    id: UUID
    name: String
    quantity: Int
}

type scr_CompositionO2OTestEntity {
    _instanceName: String
    id: UUID
    name: String
    nestedComposition: scr_DeeplyNestedTestEntity
    quantity: Int
}

type scr_Customer {
    _instanceName: String
    email: String
    id: UUID
    name: String
}

type scr_DatatypesTestEntity {
    _instanceName: String
    associationM2Mattr: [scr_AssociationM2MTestEntity]
    associationM2Oattr: scr_AssociationM2OTestEntity
    associationO2Mattr: [scr_AssociationO2MTestEntity]
    associationO2Oattr: scr_AssociationO2OTestEntity
    bigDecimalAttr: BigDecimal
    booleanAttr: Boolean
    charAttr: Char
    compositionO2Mattr: [scr_CompositionO2MTestEntity]
    compositionO2Oattr: scr_CompositionO2OTestEntity
    datatypesTestEntity3: scr_DatatypesTestEntity3
    dateAttr: Date
    dateTimeAttr: DateTime
    doubleAttr: Float
    enumAttr: TestEnum
    id: UUID
    intIdentityIdTestEntityAssociationO2OAttr: scr_IntIdentityIdTestEntity
    integerAttr: Int
    integerIdTestEntityAssociationM2MAttr: [scr_IntegerIdTestEntity]
    localDateAttr: LocalDate
    localDateTimeAttr: LocalDateTime
    localTimeAttr: LocalTime
    longAttr: Long
    name: String
    offsetDateTimeAttr: OffsetDateTime
    offsetTimeAttr: OffsetTime
    readOnlyStringAttr: String
    stringAttr: String
    stringIdTestEntityAssociationM2O: scr_StringIdTestEntity
    stringIdTestEntityAssociationO2O: scr_StringIdTestEntity
    timeAttr: Time
    uuidAttr: UUID
}

type scr_DatatypesTestEntity2 {
    _instanceName: String
    datatypesTestEntityAttr: scr_DatatypesTestEntity
    id: UUID
    intIdentityIdTestEntityAttr: scr_IntIdentityIdTestEntity
    integerIdTestEntityAttr: scr_IntegerIdTestEntity
    stringIdTestEntityAttr: scr_StringIdTestEntity
    weirdStringIdTestEntityAttr: scr_WeirdStringIdTestEntity
}

type scr_DatatypesTestEntity3 {
    _instanceName: String
    datatypesTestEntityAttr: [scr_DatatypesTestEntity]
    id: UUID
    intIdentityIdTestEntityAttr: [scr_IntIdentityIdTestEntity]
    integerIdTestEntityAttr: [scr_IntegerIdTestEntity]
    name: String
    stringIdTestEntityAttr: [scr_StringIdTestEntity]
    weirdStringIdTestEntityAttr: [scr_WeirdStringIdTestEntity]
}

type scr_DeeplyNestedO2MTestEntity {
    _instanceName: String
    compositionO2MTestEntity: scr_CompositionO2MTestEntity
    id: UUID
    name: String
}

type scr_DeeplyNestedTestEntity {
    _instanceName: String
    associationO2Oattr: scr_AssociationO2OTestEntity
    id: UUID
    name: String
}

type scr_FavoriteCar {
    _instanceName: String
    car: scr_Car
    id: UUID
    notes: String
    user: scr_User
}

type scr_FormWizardAssociationO2OTestEntity {
    _instanceName: String
    formWizardTestEntity: scr_FormWizardTestEntity
    id: UUID
    name: String
}

type scr_FormWizardCompositionO2OTestEntity {
    _instanceName: String
    id: UUID
    name: String
}

type scr_FormWizardTestEntity {
    _instanceName: String
    associationO2O: scr_FormWizardAssociationO2OTestEntity
    compositionO2O: scr_FormWizardCompositionO2OTestEntity
    date: Date
    id: UUID
    integer: Int
    notNull: String
    time: Time
}

type scr_Garage {
    _instanceName: String
    address: String
    capacity: Int
    cars: [scr_Car]
    currentCars: [scr_Car]
    id: UUID
    name: String
    personnel: [scr_User]
    vanEntry: Boolean
    workingHoursFrom: LocalTime
    workingHoursTo: LocalTime
}

type scr_IntIdentityIdTestEntity {
    _instanceName: String
    createTs: DateTime
    createdBy: String
    datatypesTestEntity: scr_DatatypesTestEntity
    datatypesTestEntity3: scr_DatatypesTestEntity3
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: Int
    updateTs: DateTime
    updatedBy: String
    version: Int
}

type scr_IntegerIdTestEntity {
    _instanceName: String
    createTs: DateTime
    createdBy: String
    datatypesTestEntities: [scr_DatatypesTestEntity]
    datatypesTestEntity3: scr_DatatypesTestEntity3
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: Int
    updateTs: DateTime
    updatedBy: String
    version: Int
}

type scr_Order {
    _instanceName: String
    amount: BigDecimal
    customer: scr_Customer
    date: LocalDateTime
    id: UUID
    lines: [scr_OrderLine]
}

type scr_OrderLine {
    _instanceName: String
    id: UUID
    order: scr_Order
    product: scr_Product
    quantity: Int
}

type scr_Product {
    _instanceName: String
    car: scr_Car
    id: UUID
    price: BigDecimal
    special: Boolean
}

type scr_SparePart {
    _instanceName: String
    id: UUID
    name: String
    spareParts: scr_SparePart
}

type scr_StringIdTestEntity {
    _instanceName: String
    createTs: DateTime
    createdBy: String
    datatypesTestEntity: scr_DatatypesTestEntity
    datatypesTestEntity3: scr_DatatypesTestEntity3
    deleteTs: DateTime
    deletedBy: String
    description: String
    identifier: String
    productCode: String
    updateTs: DateTime
    updatedBy: String
    version: Int
}

type scr_TechnicalCertificate {
    _instanceName: String
    car: scr_Car
    certNumber: String
    id: UUID
}

type scr_TrickyIdTestEntity {
    _instanceName: String
    otherAttr: String
    trickyId: Long
}

type scr_User {
    _instanceName: String
    email: String
    enabled: Boolean
    firstName: String
    id: UUID
    lastName: String
    password: String
    phone: String
    username: String
    version: Int
}

type scr_WeirdStringIdTestEntity {
    _instanceName: String
    createTs: DateTime
    createdBy: String
    datatypesTestEntity3: scr_DatatypesTestEntity3
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: String
    identifier: String
    updateTs: DateTime
    updatedBy: String
    version: Int
}

type sec_Permission {
    target: String
    value: Int
}

type sec_PermissionConfig {
    entities: [sec_Permission]
    entityAttributes: [sec_Permission]
    specifics: [sec_Permission]
}

type sec_ResourcePolicyEntity {
    _instanceName: String
    action: String
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    effect: String
    id: UUID
    policyGroup: String
    resource: String
    role: sec_ResourceRoleEntity
    type: String
    updateTs: DateTime
    updatedBy: String
    version: Int
}

type sec_ResourceRoleEntity {
    _instanceName: String
    childRoles: String
    code: String
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: UUID
    name: String
    resourcePolicies: [sec_ResourcePolicyEntity]
    scopes: String
    sysTenantId: String
    updateTs: DateTime
    updatedBy: String
    version: Int
}

type sec_RoleAssignmentEntity {
    _instanceName: String
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    id: UUID
    roleCode: String
    roleType: String
    updateTs: DateTime
    updatedBy: String
    username: String
    version: Int
}

type sec_RowLevelPolicyEntity {
    _instanceName: String
    action: RowLevelPolicyAction
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    entityName: String
    id: UUID
    joinClause: String
    role: sec_RowLevelRoleEntity
    script: String
    type: RowLevelPolicyType
    updateTs: DateTime
    updatedBy: String
    version: Int
    whereClause: String
}

type sec_RowLevelRoleEntity {
    _instanceName: String
    childRoles: String
    code: String
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: UUID
    name: String
    rowLevelPolicies: [sec_RowLevelPolicyEntity]
    sysTenantId: String
    updateTs: DateTime
    updatedBy: String
    version: Int
}

type ui_FilterConfiguration {
    _instanceName: String
    componentId: String
    configurationId: String
    defaultForAll: Boolean
    defaultForMe: Boolean
    id: UUID
    name: String
    rootCondition: String
    sysTenantId: String
    username: String
}

type ui_Setting {
    _instanceName: String
    createTs: DateTime
    createdBy: String
    id: UUID
    name: String
    username: String
    value: String
}

type ui_TablePresentation {
    _instanceName: String
    autoSave: Boolean
    componentId: String
    createTs: DateTime
    createdBy: String
    id: UUID
    isDefault: Boolean
    name: String
    settings: String
    sysTenantId: String
    updateTs: DateTime
    updatedBy: String
    username: String
}

enum CarType {
    HATCHBACK
    SEDAN
}

enum EcoRank {
    EURO1
    EURO2
    EURO3
}

enum RowLevelPolicyAction {
    CREATE
    DELETE
    READ
    UPDATE
}

enum RowLevelPolicyType {
    JPQL
    PREDICATE
}

enum SortOrder {
    ASC
    DESC
}

enum TestEnum {
    NEW_VALUE
    NEW_VALUE1
    NEW_VALUE2
}

"expression to compare columns of type BigDecimal. All fields are combined with logical 'AND'"
input inp_BigDecimalFilterCondition {
    "equals"
    _eq: BigDecimal
    "greater than"
    _gt: BigDecimal
    "greater than or equals"
    _gte: BigDecimal
    "in list"
    _in: [BigDecimal]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: BigDecimal
    "less than or equals"
    _lte: BigDecimal
    "not equals"
    _neq: BigDecimal
    "not in list"
    _notIn: [BigDecimal]
}

"expression to compare columns of type BigInteger. All fields are combined with logical 'AND'"
input inp_BigIntegerFilterCondition {
    "equals"
    _eq: BigInteger
    "greater than"
    _gt: BigInteger
    "greater than or equals"
    _gte: BigInteger
    "in list"
    _in: [BigInteger]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: BigInteger
    "less than or equals"
    _lte: BigInteger
    "not equals"
    _neq: BigInteger
    "not in list"
    _notIn: [BigInteger]
}

"expression to compare columns of type Boolean. All fields are combined with logical 'AND'"
input inp_BooleanFilterCondition {
    "equals"
    _eq: Boolean
    "is null"
    _isNull: Boolean
    "not equals"
    _neq: Boolean
}

"expression to compare columns of type Char. All fields are combined with logical 'AND'"
input inp_CharFilterCondition {
    "equals"
    _eq: Char
    "in list"
    _in: [Char]
    "is null"
    _isNull: Boolean
    "not equals"
    _neq: Char
    "not in list"
    _notIn: [Char]
}

"expression to compare columns of type Date. All fields are combined with logical 'AND'"
input inp_DateFilterCondition {
    "equals"
    _eq: Date
    "greater than"
    _gt: Date
    "greater than or equals"
    _gte: Date
    "in list"
    _in: [Date]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: Date
    "less than or equals"
    _lte: Date
    "not equals"
    _neq: Date
    "not in list"
    _notIn: [Date]
}

"expression to compare columns of type DateTime. All fields are combined with logical 'AND'"
input inp_DateTimeFilterCondition {
    "equals"
    _eq: DateTime
    "greater than"
    _gt: DateTime
    "greater than or equals"
    _gte: DateTime
    "in list"
    _in: [DateTime]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: DateTime
    "less than or equals"
    _lte: DateTime
    "not equals"
    _neq: DateTime
    "not in list"
    _notIn: [DateTime]
}

"expression to compare columns of type Float. All fields are combined with logical 'AND'"
input inp_FloatFilterCondition {
    "equals"
    _eq: Float
    "greater than"
    _gt: Float
    "greater than or equals"
    _gte: Float
    "in list"
    _in: [Float]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: Float
    "less than or equals"
    _lte: Float
    "not equals"
    _neq: Float
    "not in list"
    _notIn: [Float]
}

"expression to compare columns of type Int. All fields are combined with logical 'AND'"
input inp_IntFilterCondition {
    "equals"
    _eq: Int
    "greater than"
    _gt: Int
    "greater than or equals"
    _gte: Int
    "in list"
    _in: [Int]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: Int
    "less than or equals"
    _lte: Int
    "not equals"
    _neq: Int
    "not in list"
    _notIn: [Int]
}

"expression to compare columns of type LocalDate. All fields are combined with logical 'AND'"
input inp_LocalDateFilterCondition {
    "equals"
    _eq: LocalDate
    "greater than"
    _gt: LocalDate
    "greater than or equals"
    _gte: LocalDate
    "in list"
    _in: [LocalDate]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: LocalDate
    "less than or equals"
    _lte: LocalDate
    "not equals"
    _neq: LocalDate
    "not in list"
    _notIn: [LocalDate]
}

"expression to compare columns of type LocalDateTime. All fields are combined with logical 'AND'"
input inp_LocalDateTimeFilterCondition {
    "equals"
    _eq: LocalDateTime
    "greater than"
    _gt: LocalDateTime
    "greater than or equals"
    _gte: LocalDateTime
    "in list"
    _in: [LocalDateTime]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: LocalDateTime
    "less than or equals"
    _lte: LocalDateTime
    "not equals"
    _neq: LocalDateTime
    "not in list"
    _notIn: [LocalDateTime]
}

"expression to compare columns of type LocalTime. All fields are combined with logical 'AND'"
input inp_LocalTimeFilterCondition {
    "equals"
    _eq: LocalTime
    "greater than"
    _gt: LocalTime
    "greater than or equals"
    _gte: LocalTime
    "is null"
    _isNull: Boolean
    "less that"
    _lt: LocalTime
    "less than or equals"
    _lte: LocalTime
    "not equals"
    _neq: LocalTime
}

"expression to compare columns of type Long. All fields are combined with logical 'AND'"
input inp_LongFilterCondition {
    "equals"
    _eq: Long
    "greater than"
    _gt: Long
    "greater than or equals"
    _gte: Long
    "in list"
    _in: [Long]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: Long
    "less than or equals"
    _lte: Long
    "not equals"
    _neq: Long
    "not in list"
    _notIn: [Long]
}

"expression to compare columns of type OffsetDateTime. All fields are combined with logical 'AND'"
input inp_OffsetDateTimeFilterCondition {
    "equals"
    _eq: OffsetDateTime
    "greater than"
    _gt: OffsetDateTime
    "greater than or equals"
    _gte: OffsetDateTime
    "in list"
    _in: [OffsetDateTime]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: OffsetDateTime
    "less than or equals"
    _lte: OffsetDateTime
    "not equals"
    _neq: OffsetDateTime
    "not in list"
    _notIn: [OffsetDateTime]
}

"expression to compare columns of type OffsetTime. All fields are combined with logical 'AND'"
input inp_OffsetTimeFilterCondition {
    "equals"
    _eq: OffsetTime
    "greater than"
    _gt: OffsetTime
    "greater than or equals"
    _gte: OffsetTime
    "is null"
    _isNull: Boolean
    "less that"
    _lt: OffsetTime
    "less than or equals"
    _lte: OffsetTime
    "not equals"
    _neq: OffsetTime
}

"expression to compare columns of type Short. All fields are combined with logical 'AND'"
input inp_ShortFilterCondition {
    "equals"
    _eq: Short
    "greater than"
    _gt: Short
    "greater than or equals"
    _gte: Short
    "in list"
    _in: [Short]
    "is null"
    _isNull: Boolean
    "less that"
    _lt: Short
    "less than or equals"
    _lte: Short
    "not equals"
    _neq: Short
    "not in list"
    _notIn: [Short]
}

"expression to compare columns of type String. All fields are combined with logical 'AND'"
input inp_StringFilterCondition {
    "contains substring"
    _contains: String
    "ends with substring"
    _endsWith: String
    "equals"
    _eq: String
    "in list"
    _in: [String]
    "is null"
    _isNull: Boolean
    "not equals"
    _neq: String
    "not contains substring"
    _notContains: String
    "not in list"
    _notIn: [String]
    "starts with substring"
    _startsWith: String
}

"expression to compare columns of type Time. All fields are combined with logical 'AND'"
input inp_TimeFilterCondition {
    "equals"
    _eq: Time
    "greater than"
    _gt: Time
    "greater than or equals"
    _gte: Time
    "is null"
    _isNull: Boolean
    "less that"
    _lt: Time
    "less than or equals"
    _lte: Time
    "not equals"
    _neq: Time
}

"expression to compare columns of type UUID. All fields are combined with logical 'AND'"
input inp_UUIDFilterCondition {
    "equals"
    _eq: UUID
    "in list"
    _in: [UUID]
    "is null"
    _isNull: Boolean
    "not equals"
    _neq: UUID
    "not in list"
    _notIn: [UUID]
}

input inp_scr_AssociationM2MTestEntity {
    datatypesTestEntities: [inp_scr_DatatypesTestEntity]
    id: UUID
    name: String
}

input inp_scr_AssociationM2MTestEntityFilterCondition {
    AND: [inp_scr_AssociationM2MTestEntityFilterCondition]
    OR: [inp_scr_AssociationM2MTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
}

input inp_scr_AssociationM2MTestEntityOrderBy {
    id: SortOrder
    name: SortOrder
}

input inp_scr_AssociationM2OTestEntity {
    id: UUID
    name: String
}

input inp_scr_AssociationM2OTestEntityFilterCondition {
    AND: [inp_scr_AssociationM2OTestEntityFilterCondition]
    OR: [inp_scr_AssociationM2OTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
}

input inp_scr_AssociationM2OTestEntityOrderBy {
    id: SortOrder
    name: SortOrder
}

input inp_scr_AssociationO2MTestEntity {
    datatypesTestEntity: inp_scr_DatatypesTestEntity
    id: UUID
    name: String
}

input inp_scr_AssociationO2MTestEntityFilterCondition {
    AND: [inp_scr_AssociationO2MTestEntityFilterCondition]
    OR: [inp_scr_AssociationO2MTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    datatypesTestEntity: [inp_scr_DatatypesTestEntityFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
}

input inp_scr_AssociationO2MTestEntityOrderBy {
    datatypesTestEntity: inp_scr_DatatypesTestEntityOrderBy
    id: SortOrder
    name: SortOrder
}

input inp_scr_AssociationO2OTestEntity {
    datatypesTestEntity: inp_scr_DatatypesTestEntity
    deeplyNestedTestEntity: inp_scr_DeeplyNestedTestEntity
    id: UUID
    name: String
}

input inp_scr_AssociationO2OTestEntityFilterCondition {
    AND: [inp_scr_AssociationO2OTestEntityFilterCondition]
    OR: [inp_scr_AssociationO2OTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    datatypesTestEntity: [inp_scr_DatatypesTestEntityFilterCondition]
    deeplyNestedTestEntity: [inp_scr_DeeplyNestedTestEntityFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
}

input inp_scr_AssociationO2OTestEntityOrderBy {
    datatypesTestEntity: inp_scr_DatatypesTestEntityOrderBy
    deeplyNestedTestEntity: inp_scr_DeeplyNestedTestEntityOrderBy
    id: SortOrder
    name: SortOrder
}

input inp_scr_BoringStringIdTestEntity {
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: String
    updateTs: DateTime
    updatedBy: String
    uuid: UUID
    version: Int
}

input inp_scr_BoringStringIdTestEntityFilterCondition {
    AND: [inp_scr_BoringStringIdTestEntityFilterCondition]
    OR: [inp_scr_BoringStringIdTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    deleteTs: [inp_DateTimeFilterCondition]
    deletedBy: [inp_StringFilterCondition]
    description: [inp_StringFilterCondition]
    id: [inp_StringFilterCondition]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    uuid: [inp_UUIDFilterCondition]
    version: [inp_IntFilterCondition]
}

input inp_scr_BoringStringIdTestEntityOrderBy {
    createTs: SortOrder
    createdBy: SortOrder
    deleteTs: SortOrder
    deletedBy: SortOrder
    description: SortOrder
    id: SortOrder
    updateTs: SortOrder
    updatedBy: SortOrder
    uuid: SortOrder
    version: SortOrder
}

input inp_scr_Car {
    carType: CarType
    createdBy: String
    createdDate: Date
    ecoRank: EcoRank
    garage: inp_scr_Garage
    id: UUID
    lastModifiedBy: String
    lastModifiedDate: Date
    manufactureDate: DateTime
    manufacturer: String
    maxPassengers: Int
    mileage: Float
    model: String
    photo: String
    price: BigDecimal
    purchaseDate: Date
    regNumber: String
    technicalCertificate: inp_scr_TechnicalCertificate
    version: Int
    wheelOnRight: Boolean
}

input inp_scr_CarFilterCondition {
    AND: [inp_scr_CarFilterCondition]
    OR: [inp_scr_CarFilterCondition]
    "is null"
    _isNull: Boolean
    carType: [String]
    createdBy: [inp_StringFilterCondition]
    createdDate: [inp_DateFilterCondition]
    ecoRank: [String]
    garage: [inp_scr_GarageFilterCondition]
    id: [inp_UUIDFilterCondition]
    lastModifiedBy: [inp_StringFilterCondition]
    lastModifiedDate: [inp_DateFilterCondition]
    manufactureDate: [inp_DateTimeFilterCondition]
    manufacturer: [inp_StringFilterCondition]
    maxPassengers: [inp_IntFilterCondition]
    mileage: [inp_FloatFilterCondition]
    model: [inp_StringFilterCondition]
    photo: [inp_StringFilterCondition]
    price: [inp_BigDecimalFilterCondition]
    purchaseDate: [inp_DateFilterCondition]
    regNumber: [inp_StringFilterCondition]
    technicalCertificate: [inp_scr_TechnicalCertificateFilterCondition]
    version: [inp_IntFilterCondition]
    wheelOnRight: [inp_BooleanFilterCondition]
}

input inp_scr_CarOrderBy {
    carType: String
    createdBy: SortOrder
    createdDate: SortOrder
    ecoRank: String
    garage: inp_scr_GarageOrderBy
    id: SortOrder
    lastModifiedBy: SortOrder
    lastModifiedDate: SortOrder
    manufactureDate: SortOrder
    manufacturer: SortOrder
    maxPassengers: SortOrder
    mileage: SortOrder
    model: SortOrder
    photo: SortOrder
    price: SortOrder
    purchaseDate: SortOrder
    regNumber: SortOrder
    technicalCertificate: inp_scr_TechnicalCertificateOrderBy
    version: SortOrder
    wheelOnRight: SortOrder
}

input inp_scr_CarRent {
    car: inp_scr_Car
    fromDate: Date
    fromDateTime: DateTime
    fromTime: Time
    id: UUID
}

input inp_scr_CarRentFilterCondition {
    AND: [inp_scr_CarRentFilterCondition]
    OR: [inp_scr_CarRentFilterCondition]
    "is null"
    _isNull: Boolean
    car: [inp_scr_CarFilterCondition]
    fromDate: [inp_DateFilterCondition]
    fromDateTime: [inp_DateTimeFilterCondition]
    fromTime: [inp_TimeFilterCondition]
    id: [inp_UUIDFilterCondition]
}

input inp_scr_CarRentOrderBy {
    car: inp_scr_CarOrderBy
    fromDate: SortOrder
    fromDateTime: SortOrder
    fromTime: SortOrder
    id: SortOrder
}

input inp_scr_CompositionO2MTestEntity {
    datatypesTestEntity: inp_scr_DatatypesTestEntity
    deeplyNestedO2Mattr: [inp_scr_DeeplyNestedO2MTestEntity]
    id: UUID
    name: String
    quantity: Int
}

input inp_scr_CompositionO2MTestEntityFilterCondition {
    AND: [inp_scr_CompositionO2MTestEntityFilterCondition]
    OR: [inp_scr_CompositionO2MTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    datatypesTestEntity: [inp_scr_DatatypesTestEntityFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
    quantity: [inp_IntFilterCondition]
}

input inp_scr_CompositionO2MTestEntityOrderBy {
    datatypesTestEntity: inp_scr_DatatypesTestEntityOrderBy
    id: SortOrder
    name: SortOrder
    quantity: SortOrder
}

input inp_scr_CompositionO2OTestEntity {
    id: UUID
    name: String
    nestedComposition: inp_scr_DeeplyNestedTestEntity
    quantity: Int
}

input inp_scr_CompositionO2OTestEntityFilterCondition {
    AND: [inp_scr_CompositionO2OTestEntityFilterCondition]
    OR: [inp_scr_CompositionO2OTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
    nestedComposition: [inp_scr_DeeplyNestedTestEntityFilterCondition]
    quantity: [inp_IntFilterCondition]
}

input inp_scr_CompositionO2OTestEntityOrderBy {
    id: SortOrder
    name: SortOrder
    nestedComposition: inp_scr_DeeplyNestedTestEntityOrderBy
    quantity: SortOrder
}

input inp_scr_Customer {
    email: String
    id: UUID
    name: String
}

input inp_scr_CustomerFilterCondition {
    AND: [inp_scr_CustomerFilterCondition]
    OR: [inp_scr_CustomerFilterCondition]
    "is null"
    _isNull: Boolean
    email: [inp_StringFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
}

input inp_scr_CustomerOrderBy {
    email: SortOrder
    id: SortOrder
    name: SortOrder
}

input inp_scr_DatatypesTestEntity {
    associationM2Mattr: [inp_scr_AssociationM2MTestEntity]
    associationM2Oattr: inp_scr_AssociationM2OTestEntity
    associationO2Mattr: [inp_scr_AssociationO2MTestEntity]
    associationO2Oattr: inp_scr_AssociationO2OTestEntity
    bigDecimalAttr: BigDecimal
    booleanAttr: Boolean
    charAttr: Char
    compositionO2Mattr: [inp_scr_CompositionO2MTestEntity]
    compositionO2Oattr: inp_scr_CompositionO2OTestEntity
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3
    dateAttr: Date
    dateTimeAttr: DateTime
    doubleAttr: Float
    enumAttr: TestEnum
    id: UUID
    intIdentityIdTestEntityAssociationO2OAttr: inp_scr_IntIdentityIdTestEntity
    integerAttr: Int
    integerIdTestEntityAssociationM2MAttr: [inp_scr_IntegerIdTestEntity]
    localDateAttr: LocalDate
    localDateTimeAttr: LocalDateTime
    localTimeAttr: LocalTime
    longAttr: Long
    name: String
    offsetDateTimeAttr: OffsetDateTime
    offsetTimeAttr: OffsetTime
    readOnlyStringAttr: String
    stringAttr: String
    stringIdTestEntityAssociationM2O: inp_scr_StringIdTestEntity
    stringIdTestEntityAssociationO2O: inp_scr_StringIdTestEntity
    timeAttr: Time
    uuidAttr: UUID
}

input inp_scr_DatatypesTestEntity2 {
    datatypesTestEntityAttr: inp_scr_DatatypesTestEntity
    id: UUID
    intIdentityIdTestEntityAttr: inp_scr_IntIdentityIdTestEntity
    integerIdTestEntityAttr: inp_scr_IntegerIdTestEntity
    stringIdTestEntityAttr: inp_scr_StringIdTestEntity
    weirdStringIdTestEntityAttr: inp_scr_WeirdStringIdTestEntity
}

input inp_scr_DatatypesTestEntity2FilterCondition {
    AND: [inp_scr_DatatypesTestEntity2FilterCondition]
    OR: [inp_scr_DatatypesTestEntity2FilterCondition]
    "is null"
    _isNull: Boolean
    datatypesTestEntityAttr: [inp_scr_DatatypesTestEntityFilterCondition]
    id: [inp_UUIDFilterCondition]
    intIdentityIdTestEntityAttr: [inp_scr_IntIdentityIdTestEntityFilterCondition]
    integerIdTestEntityAttr: [inp_scr_IntegerIdTestEntityFilterCondition]
    stringIdTestEntityAttr: [inp_scr_StringIdTestEntityFilterCondition]
    weirdStringIdTestEntityAttr: [inp_scr_WeirdStringIdTestEntityFilterCondition]
}

input inp_scr_DatatypesTestEntity2OrderBy {
    datatypesTestEntityAttr: inp_scr_DatatypesTestEntityOrderBy
    id: SortOrder
    intIdentityIdTestEntityAttr: inp_scr_IntIdentityIdTestEntityOrderBy
    integerIdTestEntityAttr: inp_scr_IntegerIdTestEntityOrderBy
    stringIdTestEntityAttr: inp_scr_StringIdTestEntityOrderBy
    weirdStringIdTestEntityAttr: inp_scr_WeirdStringIdTestEntityOrderBy
}

input inp_scr_DatatypesTestEntity3 {
    datatypesTestEntityAttr: [inp_scr_DatatypesTestEntity]
    id: UUID
    intIdentityIdTestEntityAttr: [inp_scr_IntIdentityIdTestEntity]
    integerIdTestEntityAttr: [inp_scr_IntegerIdTestEntity]
    name: String
    stringIdTestEntityAttr: [inp_scr_StringIdTestEntity]
    weirdStringIdTestEntityAttr: [inp_scr_WeirdStringIdTestEntity]
}

input inp_scr_DatatypesTestEntity3FilterCondition {
    AND: [inp_scr_DatatypesTestEntity3FilterCondition]
    OR: [inp_scr_DatatypesTestEntity3FilterCondition]
    "is null"
    _isNull: Boolean
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
}

input inp_scr_DatatypesTestEntity3OrderBy {
    id: SortOrder
    name: SortOrder
}

input inp_scr_DatatypesTestEntityFilterCondition {
    AND: [inp_scr_DatatypesTestEntityFilterCondition]
    OR: [inp_scr_DatatypesTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    associationM2Oattr: [inp_scr_AssociationM2OTestEntityFilterCondition]
    associationO2Oattr: [inp_scr_AssociationO2OTestEntityFilterCondition]
    bigDecimalAttr: [inp_BigDecimalFilterCondition]
    booleanAttr: [inp_BooleanFilterCondition]
    charAttr: [inp_CharFilterCondition]
    compositionO2Oattr: [inp_scr_CompositionO2OTestEntityFilterCondition]
    datatypesTestEntity3: [inp_scr_DatatypesTestEntity3FilterCondition]
    dateAttr: [inp_DateFilterCondition]
    dateTimeAttr: [inp_DateTimeFilterCondition]
    doubleAttr: [inp_FloatFilterCondition]
    enumAttr: [String]
    id: [inp_UUIDFilterCondition]
    intIdentityIdTestEntityAssociationO2OAttr: [inp_scr_IntIdentityIdTestEntityFilterCondition]
    integerAttr: [inp_IntFilterCondition]
    localDateAttr: [inp_LocalDateFilterCondition]
    localDateTimeAttr: [inp_LocalDateTimeFilterCondition]
    localTimeAttr: [inp_LocalTimeFilterCondition]
    longAttr: [inp_LongFilterCondition]
    name: [inp_StringFilterCondition]
    offsetDateTimeAttr: [inp_OffsetDateTimeFilterCondition]
    offsetTimeAttr: [inp_OffsetTimeFilterCondition]
    readOnlyStringAttr: [inp_StringFilterCondition]
    stringAttr: [inp_StringFilterCondition]
    stringIdTestEntityAssociationM2O: [inp_scr_StringIdTestEntityFilterCondition]
    stringIdTestEntityAssociationO2O: [inp_scr_StringIdTestEntityFilterCondition]
    timeAttr: [inp_TimeFilterCondition]
    uuidAttr: [inp_UUIDFilterCondition]
}

input inp_scr_DatatypesTestEntityOrderBy {
    associationM2Oattr: inp_scr_AssociationM2OTestEntityOrderBy
    associationO2Oattr: inp_scr_AssociationO2OTestEntityOrderBy
    bigDecimalAttr: SortOrder
    booleanAttr: SortOrder
    charAttr: SortOrder
    compositionO2Oattr: inp_scr_CompositionO2OTestEntityOrderBy
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3OrderBy
    dateAttr: SortOrder
    dateTimeAttr: SortOrder
    doubleAttr: SortOrder
    enumAttr: String
    id: SortOrder
    intIdentityIdTestEntityAssociationO2OAttr: inp_scr_IntIdentityIdTestEntityOrderBy
    integerAttr: SortOrder
    localDateAttr: SortOrder
    localDateTimeAttr: SortOrder
    localTimeAttr: SortOrder
    longAttr: SortOrder
    name: SortOrder
    offsetDateTimeAttr: SortOrder
    offsetTimeAttr: SortOrder
    readOnlyStringAttr: SortOrder
    stringAttr: SortOrder
    stringIdTestEntityAssociationM2O: inp_scr_StringIdTestEntityOrderBy
    stringIdTestEntityAssociationO2O: inp_scr_StringIdTestEntityOrderBy
    timeAttr: SortOrder
    uuidAttr: SortOrder
}

input inp_scr_DeeplyNestedO2MTestEntity {
    compositionO2MTestEntity: inp_scr_CompositionO2MTestEntity
    id: UUID
    name: String
}

input inp_scr_DeeplyNestedO2MTestEntityFilterCondition {
    AND: [inp_scr_DeeplyNestedO2MTestEntityFilterCondition]
    OR: [inp_scr_DeeplyNestedO2MTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    compositionO2MTestEntity: [inp_scr_CompositionO2MTestEntityFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
}

input inp_scr_DeeplyNestedO2MTestEntityOrderBy {
    compositionO2MTestEntity: inp_scr_CompositionO2MTestEntityOrderBy
    id: SortOrder
    name: SortOrder
}

input inp_scr_DeeplyNestedTestEntity {
    associationO2Oattr: inp_scr_AssociationO2OTestEntity
    id: UUID
    name: String
}

input inp_scr_DeeplyNestedTestEntityFilterCondition {
    AND: [inp_scr_DeeplyNestedTestEntityFilterCondition]
    OR: [inp_scr_DeeplyNestedTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    associationO2Oattr: [inp_scr_AssociationO2OTestEntityFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
}

input inp_scr_DeeplyNestedTestEntityOrderBy {
    associationO2Oattr: inp_scr_AssociationO2OTestEntityOrderBy
    id: SortOrder
    name: SortOrder
}

input inp_scr_FavoriteCar {
    car: inp_scr_Car
    id: UUID
    notes: String
    user: inp_scr_User
}

input inp_scr_FavoriteCarFilterCondition {
    AND: [inp_scr_FavoriteCarFilterCondition]
    OR: [inp_scr_FavoriteCarFilterCondition]
    "is null"
    _isNull: Boolean
    car: [inp_scr_CarFilterCondition]
    id: [inp_UUIDFilterCondition]
    notes: [inp_StringFilterCondition]
    user: [inp_scr_UserFilterCondition]
}

input inp_scr_FavoriteCarOrderBy {
    car: inp_scr_CarOrderBy
    id: SortOrder
    notes: SortOrder
    user: inp_scr_UserOrderBy
}

input inp_scr_FormWizardAssociationO2OTestEntity {
    formWizardTestEntity: inp_scr_FormWizardTestEntity
    id: UUID
    name: String
}

input inp_scr_FormWizardAssociationO2OTestEntityFilterCondition {
    AND: [inp_scr_FormWizardAssociationO2OTestEntityFilterCondition]
    OR: [inp_scr_FormWizardAssociationO2OTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    formWizardTestEntity: [inp_scr_FormWizardTestEntityFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
}

input inp_scr_FormWizardAssociationO2OTestEntityOrderBy {
    formWizardTestEntity: inp_scr_FormWizardTestEntityOrderBy
    id: SortOrder
    name: SortOrder
}

input inp_scr_FormWizardCompositionO2OTestEntity {
    id: UUID
    name: String
}

input inp_scr_FormWizardCompositionO2OTestEntityFilterCondition {
    AND: [inp_scr_FormWizardCompositionO2OTestEntityFilterCondition]
    OR: [inp_scr_FormWizardCompositionO2OTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
}

input inp_scr_FormWizardCompositionO2OTestEntityOrderBy {
    id: SortOrder
    name: SortOrder
}

input inp_scr_FormWizardTestEntity {
    associationO2O: inp_scr_FormWizardAssociationO2OTestEntity
    compositionO2O: inp_scr_FormWizardCompositionO2OTestEntity
    date: Date
    id: UUID
    integer: Int
    notNull: String
    time: Time
}

input inp_scr_FormWizardTestEntityFilterCondition {
    AND: [inp_scr_FormWizardTestEntityFilterCondition]
    OR: [inp_scr_FormWizardTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    associationO2O: [inp_scr_FormWizardAssociationO2OTestEntityFilterCondition]
    compositionO2O: [inp_scr_FormWizardCompositionO2OTestEntityFilterCondition]
    date: [inp_DateFilterCondition]
    id: [inp_UUIDFilterCondition]
    integer: [inp_IntFilterCondition]
    notNull: [inp_StringFilterCondition]
    time: [inp_TimeFilterCondition]
}

input inp_scr_FormWizardTestEntityOrderBy {
    associationO2O: inp_scr_FormWizardAssociationO2OTestEntityOrderBy
    compositionO2O: inp_scr_FormWizardCompositionO2OTestEntityOrderBy
    date: SortOrder
    id: SortOrder
    integer: SortOrder
    notNull: SortOrder
    time: SortOrder
}

input inp_scr_Garage {
    address: String
    capacity: Int
    cars: [inp_scr_Car]
    currentCars: [inp_scr_Car]
    id: UUID
    name: String
    personnel: [inp_scr_User]
    vanEntry: Boolean
    workingHoursFrom: LocalTime
    workingHoursTo: LocalTime
}

input inp_scr_GarageFilterCondition {
    AND: [inp_scr_GarageFilterCondition]
    OR: [inp_scr_GarageFilterCondition]
    "is null"
    _isNull: Boolean
    address: [inp_StringFilterCondition]
    capacity: [inp_IntFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
    vanEntry: [inp_BooleanFilterCondition]
    workingHoursFrom: [inp_LocalTimeFilterCondition]
    workingHoursTo: [inp_LocalTimeFilterCondition]
}

input inp_scr_GarageOrderBy {
    address: SortOrder
    capacity: SortOrder
    id: SortOrder
    name: SortOrder
    vanEntry: SortOrder
    workingHoursFrom: SortOrder
    workingHoursTo: SortOrder
}

input inp_scr_IntIdentityIdTestEntity {
    createTs: DateTime
    createdBy: String
    datatypesTestEntity: inp_scr_DatatypesTestEntity
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: Int
    updateTs: DateTime
    updatedBy: String
    version: Int
}

input inp_scr_IntIdentityIdTestEntityFilterCondition {
    AND: [inp_scr_IntIdentityIdTestEntityFilterCondition]
    OR: [inp_scr_IntIdentityIdTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    datatypesTestEntity: [inp_scr_DatatypesTestEntityFilterCondition]
    datatypesTestEntity3: [inp_scr_DatatypesTestEntity3FilterCondition]
    deleteTs: [inp_DateTimeFilterCondition]
    deletedBy: [inp_StringFilterCondition]
    description: [inp_StringFilterCondition]
    id: [inp_IntFilterCondition]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    version: [inp_IntFilterCondition]
}

input inp_scr_IntIdentityIdTestEntityOrderBy {
    createTs: SortOrder
    createdBy: SortOrder
    datatypesTestEntity: inp_scr_DatatypesTestEntityOrderBy
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3OrderBy
    deleteTs: SortOrder
    deletedBy: SortOrder
    description: SortOrder
    id: SortOrder
    updateTs: SortOrder
    updatedBy: SortOrder
    version: SortOrder
}

input inp_scr_IntegerIdTestEntity {
    createTs: DateTime
    createdBy: String
    datatypesTestEntities: [inp_scr_DatatypesTestEntity]
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: Int
    updateTs: DateTime
    updatedBy: String
    version: Int
}

input inp_scr_IntegerIdTestEntityFilterCondition {
    AND: [inp_scr_IntegerIdTestEntityFilterCondition]
    OR: [inp_scr_IntegerIdTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    datatypesTestEntity3: [inp_scr_DatatypesTestEntity3FilterCondition]
    deleteTs: [inp_DateTimeFilterCondition]
    deletedBy: [inp_StringFilterCondition]
    description: [inp_StringFilterCondition]
    id: [inp_IntFilterCondition]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    version: [inp_IntFilterCondition]
}

input inp_scr_IntegerIdTestEntityOrderBy {
    createTs: SortOrder
    createdBy: SortOrder
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3OrderBy
    deleteTs: SortOrder
    deletedBy: SortOrder
    description: SortOrder
    id: SortOrder
    updateTs: SortOrder
    updatedBy: SortOrder
    version: SortOrder
}

input inp_scr_Order {
    amount: BigDecimal
    customer: inp_scr_Customer
    date: LocalDateTime
    id: UUID
    lines: [inp_scr_OrderLine]
}

input inp_scr_OrderFilterCondition {
    AND: [inp_scr_OrderFilterCondition]
    OR: [inp_scr_OrderFilterCondition]
    "is null"
    _isNull: Boolean
    amount: [inp_BigDecimalFilterCondition]
    customer: [inp_scr_CustomerFilterCondition]
    date: [inp_LocalDateTimeFilterCondition]
    id: [inp_UUIDFilterCondition]
}

input inp_scr_OrderLine {
    id: UUID
    order: inp_scr_Order
    product: inp_scr_Product
    quantity: Int
}

input inp_scr_OrderLineFilterCondition {
    AND: [inp_scr_OrderLineFilterCondition]
    OR: [inp_scr_OrderLineFilterCondition]
    "is null"
    _isNull: Boolean
    id: [inp_UUIDFilterCondition]
    order: [inp_scr_OrderFilterCondition]
    product: [inp_scr_ProductFilterCondition]
    quantity: [inp_IntFilterCondition]
}

input inp_scr_OrderLineOrderBy {
    id: SortOrder
    order: inp_scr_OrderOrderBy
    product: inp_scr_ProductOrderBy
    quantity: SortOrder
}

input inp_scr_OrderOrderBy {
    amount: SortOrder
    customer: inp_scr_CustomerOrderBy
    date: SortOrder
    id: SortOrder
}

input inp_scr_Product {
    car: inp_scr_Car
    id: UUID
    price: BigDecimal
    special: Boolean
}

input inp_scr_ProductFilterCondition {
    AND: [inp_scr_ProductFilterCondition]
    OR: [inp_scr_ProductFilterCondition]
    "is null"
    _isNull: Boolean
    car: [inp_scr_CarFilterCondition]
    id: [inp_UUIDFilterCondition]
    price: [inp_BigDecimalFilterCondition]
    special: [inp_BooleanFilterCondition]
}

input inp_scr_ProductOrderBy {
    car: inp_scr_CarOrderBy
    id: SortOrder
    price: SortOrder
    special: SortOrder
}

input inp_scr_SparePart {
    id: UUID
    name: String
    spareParts: inp_scr_SparePart
}

input inp_scr_SparePartFilterCondition {
    AND: [inp_scr_SparePartFilterCondition]
    OR: [inp_scr_SparePartFilterCondition]
    "is null"
    _isNull: Boolean
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
    spareParts: [inp_scr_SparePartFilterCondition]
}

input inp_scr_SparePartOrderBy {
    id: SortOrder
    name: SortOrder
    spareParts: inp_scr_SparePartOrderBy
}

input inp_scr_StringIdTestEntity {
    createTs: DateTime
    createdBy: String
    datatypesTestEntity: inp_scr_DatatypesTestEntity
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3
    deleteTs: DateTime
    deletedBy: String
    description: String
    identifier: String
    productCode: String
    updateTs: DateTime
    updatedBy: String
    version: Int
}

input inp_scr_StringIdTestEntityFilterCondition {
    AND: [inp_scr_StringIdTestEntityFilterCondition]
    OR: [inp_scr_StringIdTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    datatypesTestEntity: [inp_scr_DatatypesTestEntityFilterCondition]
    datatypesTestEntity3: [inp_scr_DatatypesTestEntity3FilterCondition]
    deleteTs: [inp_DateTimeFilterCondition]
    deletedBy: [inp_StringFilterCondition]
    description: [inp_StringFilterCondition]
    identifier: [inp_StringFilterCondition]
    productCode: [inp_StringFilterCondition]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    version: [inp_IntFilterCondition]
}

input inp_scr_StringIdTestEntityOrderBy {
    createTs: SortOrder
    createdBy: SortOrder
    datatypesTestEntity: inp_scr_DatatypesTestEntityOrderBy
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3OrderBy
    deleteTs: SortOrder
    deletedBy: SortOrder
    description: SortOrder
    identifier: SortOrder
    productCode: SortOrder
    updateTs: SortOrder
    updatedBy: SortOrder
    version: SortOrder
}

input inp_scr_TechnicalCertificate {
    car: inp_scr_Car
    certNumber: String
    id: UUID
}

input inp_scr_TechnicalCertificateFilterCondition {
    AND: [inp_scr_TechnicalCertificateFilterCondition]
    OR: [inp_scr_TechnicalCertificateFilterCondition]
    "is null"
    _isNull: Boolean
    car: [inp_scr_CarFilterCondition]
    certNumber: [inp_StringFilterCondition]
    id: [inp_UUIDFilterCondition]
}

input inp_scr_TechnicalCertificateOrderBy {
    car: inp_scr_CarOrderBy
    certNumber: SortOrder
    id: SortOrder
}

input inp_scr_TrickyIdTestEntity {
    otherAttr: String
    trickyId: Long
}

input inp_scr_TrickyIdTestEntityFilterCondition {
    AND: [inp_scr_TrickyIdTestEntityFilterCondition]
    OR: [inp_scr_TrickyIdTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    otherAttr: [inp_StringFilterCondition]
    trickyId: [inp_LongFilterCondition]
}

input inp_scr_TrickyIdTestEntityOrderBy {
    otherAttr: SortOrder
    trickyId: SortOrder
}

input inp_scr_User {
    email: String
    enabled: Boolean
    firstName: String
    id: UUID
    lastName: String
    password: String
    phone: String
    username: String
    version: Int
}

input inp_scr_UserFilterCondition {
    AND: [inp_scr_UserFilterCondition]
    OR: [inp_scr_UserFilterCondition]
    "is null"
    _isNull: Boolean
    email: [inp_StringFilterCondition]
    enabled: [inp_BooleanFilterCondition]
    firstName: [inp_StringFilterCondition]
    id: [inp_UUIDFilterCondition]
    lastName: [inp_StringFilterCondition]
    password: [inp_StringFilterCondition]
    phone: [inp_StringFilterCondition]
    username: [inp_StringFilterCondition]
    version: [inp_IntFilterCondition]
}

input inp_scr_UserOrderBy {
    email: SortOrder
    enabled: SortOrder
    firstName: SortOrder
    id: SortOrder
    lastName: SortOrder
    password: SortOrder
    phone: SortOrder
    username: SortOrder
    version: SortOrder
}

input inp_scr_WeirdStringIdTestEntity {
    createTs: DateTime
    createdBy: String
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: String
    identifier: String
    updateTs: DateTime
    updatedBy: String
    version: Int
}

input inp_scr_WeirdStringIdTestEntityFilterCondition {
    AND: [inp_scr_WeirdStringIdTestEntityFilterCondition]
    OR: [inp_scr_WeirdStringIdTestEntityFilterCondition]
    "is null"
    _isNull: Boolean
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    datatypesTestEntity3: [inp_scr_DatatypesTestEntity3FilterCondition]
    deleteTs: [inp_DateTimeFilterCondition]
    deletedBy: [inp_StringFilterCondition]
    description: [inp_StringFilterCondition]
    id: [inp_StringFilterCondition]
    identifier: [inp_StringFilterCondition]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    version: [inp_IntFilterCondition]
}

input inp_scr_WeirdStringIdTestEntityOrderBy {
    createTs: SortOrder
    createdBy: SortOrder
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3OrderBy
    deleteTs: SortOrder
    deletedBy: SortOrder
    description: SortOrder
    id: SortOrder
    identifier: SortOrder
    updateTs: SortOrder
    updatedBy: SortOrder
    version: SortOrder
}

input inp_sec_ResourcePolicyEntity {
    action: String
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    effect: String
    id: UUID
    policyGroup: String
    resource: String
    role: inp_sec_ResourceRoleEntity
    type: String
    updateTs: DateTime
    updatedBy: String
    version: Int
}

input inp_sec_ResourcePolicyEntityFilterCondition {
    AND: [inp_sec_ResourcePolicyEntityFilterCondition]
    OR: [inp_sec_ResourcePolicyEntityFilterCondition]
    "is null"
    _isNull: Boolean
    action: [inp_StringFilterCondition]
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    deleteTs: [inp_DateTimeFilterCondition]
    deletedBy: [inp_StringFilterCondition]
    effect: [inp_StringFilterCondition]
    id: [inp_UUIDFilterCondition]
    policyGroup: [inp_StringFilterCondition]
    resource: [inp_StringFilterCondition]
    role: [inp_sec_ResourceRoleEntityFilterCondition]
    type: [inp_StringFilterCondition]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    version: [inp_IntFilterCondition]
}

input inp_sec_ResourcePolicyEntityOrderBy {
    action: SortOrder
    createTs: SortOrder
    createdBy: SortOrder
    deleteTs: SortOrder
    deletedBy: SortOrder
    effect: SortOrder
    id: SortOrder
    policyGroup: SortOrder
    resource: SortOrder
    role: inp_sec_ResourceRoleEntityOrderBy
    type: SortOrder
    updateTs: SortOrder
    updatedBy: SortOrder
    version: SortOrder
}

input inp_sec_ResourceRoleEntity {
    childRoles: String
    code: String
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: UUID
    name: String
    resourcePolicies: [inp_sec_ResourcePolicyEntity]
    scopes: String
    sysTenantId: String
    updateTs: DateTime
    updatedBy: String
    version: Int
}

input inp_sec_ResourceRoleEntityFilterCondition {
    AND: [inp_sec_ResourceRoleEntityFilterCondition]
    OR: [inp_sec_ResourceRoleEntityFilterCondition]
    "is null"
    _isNull: Boolean
    childRoles: [inp_StringFilterCondition]
    code: [inp_StringFilterCondition]
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    deleteTs: [inp_DateTimeFilterCondition]
    deletedBy: [inp_StringFilterCondition]
    description: [inp_StringFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
    scopes: [inp_StringFilterCondition]
    sysTenantId: [inp_StringFilterCondition]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    version: [inp_IntFilterCondition]
}

input inp_sec_ResourceRoleEntityOrderBy {
    childRoles: SortOrder
    code: SortOrder
    createTs: SortOrder
    createdBy: SortOrder
    deleteTs: SortOrder
    deletedBy: SortOrder
    description: SortOrder
    id: SortOrder
    name: SortOrder
    scopes: SortOrder
    sysTenantId: SortOrder
    updateTs: SortOrder
    updatedBy: SortOrder
    version: SortOrder
}

input inp_sec_RoleAssignmentEntity {
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    id: UUID
    roleCode: String
    roleType: String
    updateTs: DateTime
    updatedBy: String
    username: String
    version: Int
}

input inp_sec_RoleAssignmentEntityFilterCondition {
    AND: [inp_sec_RoleAssignmentEntityFilterCondition]
    OR: [inp_sec_RoleAssignmentEntityFilterCondition]
    "is null"
    _isNull: Boolean
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    deleteTs: [inp_DateTimeFilterCondition]
    deletedBy: [inp_StringFilterCondition]
    id: [inp_UUIDFilterCondition]
    roleCode: [inp_StringFilterCondition]
    roleType: [inp_StringFilterCondition]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    username: [inp_StringFilterCondition]
    version: [inp_IntFilterCondition]
}

input inp_sec_RoleAssignmentEntityOrderBy {
    createTs: SortOrder
    createdBy: SortOrder
    deleteTs: SortOrder
    deletedBy: SortOrder
    id: SortOrder
    roleCode: SortOrder
    roleType: SortOrder
    updateTs: SortOrder
    updatedBy: SortOrder
    username: SortOrder
    version: SortOrder
}

input inp_sec_RowLevelPolicyEntity {
    action: RowLevelPolicyAction
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    entityName: String
    id: UUID
    joinClause: String
    role: inp_sec_RowLevelRoleEntity
    script: String
    type: RowLevelPolicyType
    updateTs: DateTime
    updatedBy: String
    version: Int
    whereClause: String
}

input inp_sec_RowLevelPolicyEntityFilterCondition {
    AND: [inp_sec_RowLevelPolicyEntityFilterCondition]
    OR: [inp_sec_RowLevelPolicyEntityFilterCondition]
    "is null"
    _isNull: Boolean
    action: [String]
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    deleteTs: [inp_DateTimeFilterCondition]
    deletedBy: [inp_StringFilterCondition]
    entityName: [inp_StringFilterCondition]
    id: [inp_UUIDFilterCondition]
    joinClause: [inp_StringFilterCondition]
    role: [inp_sec_RowLevelRoleEntityFilterCondition]
    script: [inp_StringFilterCondition]
    type: [String]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    version: [inp_IntFilterCondition]
    whereClause: [inp_StringFilterCondition]
}

input inp_sec_RowLevelPolicyEntityOrderBy {
    action: String
    createTs: SortOrder
    createdBy: SortOrder
    deleteTs: SortOrder
    deletedBy: SortOrder
    entityName: SortOrder
    id: SortOrder
    joinClause: SortOrder
    role: inp_sec_RowLevelRoleEntityOrderBy
    script: SortOrder
    type: String
    updateTs: SortOrder
    updatedBy: SortOrder
    version: SortOrder
    whereClause: SortOrder
}

input inp_sec_RowLevelRoleEntity {
    childRoles: String
    code: String
    createTs: DateTime
    createdBy: String
    deleteTs: DateTime
    deletedBy: String
    description: String
    id: UUID
    name: String
    rowLevelPolicies: [inp_sec_RowLevelPolicyEntity]
    sysTenantId: String
    updateTs: DateTime
    updatedBy: String
    version: Int
}

input inp_sec_RowLevelRoleEntityFilterCondition {
    AND: [inp_sec_RowLevelRoleEntityFilterCondition]
    OR: [inp_sec_RowLevelRoleEntityFilterCondition]
    "is null"
    _isNull: Boolean
    childRoles: [inp_StringFilterCondition]
    code: [inp_StringFilterCondition]
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    deleteTs: [inp_DateTimeFilterCondition]
    deletedBy: [inp_StringFilterCondition]
    description: [inp_StringFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
    sysTenantId: [inp_StringFilterCondition]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    version: [inp_IntFilterCondition]
}

input inp_sec_RowLevelRoleEntityOrderBy {
    childRoles: SortOrder
    code: SortOrder
    createTs: SortOrder
    createdBy: SortOrder
    deleteTs: SortOrder
    deletedBy: SortOrder
    description: SortOrder
    id: SortOrder
    name: SortOrder
    sysTenantId: SortOrder
    updateTs: SortOrder
    updatedBy: SortOrder
    version: SortOrder
}

input inp_ui_FilterConfiguration {
    componentId: String
    configurationId: String
    defaultForAll: Boolean
    defaultForMe: Boolean
    id: UUID
    name: String
    rootCondition: String
    sysTenantId: String
    username: String
}

input inp_ui_FilterConfigurationFilterCondition {
    AND: [inp_ui_FilterConfigurationFilterCondition]
    OR: [inp_ui_FilterConfigurationFilterCondition]
    "is null"
    _isNull: Boolean
    componentId: [inp_StringFilterCondition]
    configurationId: [inp_StringFilterCondition]
    defaultForAll: [inp_BooleanFilterCondition]
    defaultForMe: [inp_BooleanFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
    rootCondition: [inp_StringFilterCondition]
    sysTenantId: [inp_StringFilterCondition]
    username: [inp_StringFilterCondition]
}

input inp_ui_FilterConfigurationOrderBy {
    componentId: SortOrder
    configurationId: SortOrder
    defaultForAll: SortOrder
    defaultForMe: SortOrder
    id: SortOrder
    name: SortOrder
    sysTenantId: SortOrder
    username: SortOrder
}

input inp_ui_Setting {
    createTs: DateTime
    createdBy: String
    id: UUID
    name: String
    username: String
    value: String
}

input inp_ui_SettingFilterCondition {
    AND: [inp_ui_SettingFilterCondition]
    OR: [inp_ui_SettingFilterCondition]
    "is null"
    _isNull: Boolean
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    id: [inp_UUIDFilterCondition]
    name: [inp_StringFilterCondition]
    username: [inp_StringFilterCondition]
    value: [inp_StringFilterCondition]
}

input inp_ui_SettingOrderBy {
    createTs: SortOrder
    createdBy: SortOrder
    id: SortOrder
    name: SortOrder
    username: SortOrder
    value: SortOrder
}

input inp_ui_TablePresentation {
    autoSave: Boolean
    componentId: String
    createTs: DateTime
    createdBy: String
    id: UUID
    isDefault: Boolean
    name: String
    settings: String
    sysTenantId: String
    updateTs: DateTime
    updatedBy: String
    username: String
}

input inp_ui_TablePresentationFilterCondition {
    AND: [inp_ui_TablePresentationFilterCondition]
    OR: [inp_ui_TablePresentationFilterCondition]
    "is null"
    _isNull: Boolean
    autoSave: [inp_BooleanFilterCondition]
    componentId: [inp_StringFilterCondition]
    createTs: [inp_DateTimeFilterCondition]
    createdBy: [inp_StringFilterCondition]
    id: [inp_UUIDFilterCondition]
    isDefault: [inp_BooleanFilterCondition]
    name: [inp_StringFilterCondition]
    settings: [inp_StringFilterCondition]
    sysTenantId: [inp_StringFilterCondition]
    updateTs: [inp_DateTimeFilterCondition]
    updatedBy: [inp_StringFilterCondition]
    username: [inp_StringFilterCondition]
}

input inp_ui_TablePresentationOrderBy {
    autoSave: SortOrder
    componentId: SortOrder
    createTs: SortOrder
    createdBy: SortOrder
    id: SortOrder
    isDefault: SortOrder
    name: SortOrder
    settings: SortOrder
    sysTenantId: SortOrder
    updateTs: SortOrder
    updatedBy: SortOrder
    username: SortOrder
}


scalar BigDecimal

"Built-in java.math.BigInteger"
scalar BigInteger

"Built-in Byte as Int"
scalar Byte

"Built-in Char as Character"
scalar Char

"Date type"
scalar Date

"Date type with time"
scalar DateTime

"Date type"
scalar LocalDate

"Date type"
scalar LocalDateTime

"Date type"
scalar LocalTime

scalar Long

"Date type"
scalar OffsetDateTime

"Date type"
scalar OffsetTime

"Built-in Short as Int"
scalar Short

"Time type"
scalar Time

"Use SPQR's SchemaPrinter to remove this from SDL"
scalar UNREPRESENTABLE

scalar UUID

scalar Void