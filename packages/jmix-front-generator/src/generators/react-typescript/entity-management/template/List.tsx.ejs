import * as React from "react";
import {observer} from "mobx-react";
import {IReactionDisposer, reaction} from "mobx";
import {DeleteOutlined, EditOutlined, PlusOutlined} from '@ant-design/icons';
import {Modal, Button, List, message} from "antd";

import {collection, injectMainStore, MainStoreInjected, EntityPermAccessControl, screens} from "@haulmont/jmix-react-core";
import {EntityProperty, Paging, setPagination, Spinner, routerData, referencesListByEntityName} from "@haulmont/jmix-react-ui";

import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {SerializedEntity} from "@haulmont/jmix-rest";
import {FormattedMessage, injectIntl, WrappedComponentProps} from 'react-intl';
import {PaginationConfig} from "antd/es/pagination";

type Props = MainStoreInjected & WrappedComponentProps;

const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

@injectMainStore
@observer
class <%= listComponentClass %>Component extends React.Component<Props> {

  dataCollection = collection<<%= entity.className %>>(<%= entity.className %>.NAME, {
    view: '<%= listView.name %>',
    <% if (entity.updatable == true) { -%>
      sort: '-updateTs',
    <% } -%>
    loadImmediately: false,
    <% if (locals.stringIdName != null) { %>
      stringIdName: '<%= stringIdName %>'
    <% } %>
  });

  reactionDisposers: IReactionDisposer[] = [];
  fields = [
  <% listAttributes.forEach(p => { -%>
    '<%= p.name %>',
  <% }) %>
  ];

  componentDidMount(): void {
    this.reactionDisposers.push(reaction(
      () => this.dataCollection.status,
      (status) => {
        const {intl} = this.props;
        if (status === 'ERROR') {
          message.error(intl.formatMessage({id: 'common.requestFailed'}));
        }
      }
    ));
  }

  componentWillUnmount() {
    this.reactionDisposers.forEach(dispose => dispose());
  }

  showDeletionDialog = (e: SerializedEntity<<%= entity.className %>>) => {
    Modal.confirm({
      title: this.props.intl.formatMessage(
        {id: 'management.browser.delete.areYouSure'},
        {instanceName: e._instanceName}
      ),
      okText: this.props.intl.formatMessage({id: 'management.browser.delete.ok'}),
      cancelText: this.props.intl.formatMessage({id:'common.cancel'}),
      onOk: () => {
        return this.dataCollection.delete(e);
      }
    });
  };

  onCrateBtnClick = () => {
    const registeredReferral = referencesListByEntityName[ENTITY_NAME];

    screens.push({
      title: registeredReferral.entityItemNew.title,
      content: registeredReferral.entityItemNew.content
    });
  };

  onEditBtnClick = (itemId: string) => {
    const registeredReferral = referencesListByEntityName[ENTITY_NAME];

    // If we on root screen
    if (screens.currentScreenIndex === 0) {
      routerData.history.replace(ROUTING_PATH + "/" + itemId);
    }

    screens.push({
      title: registeredReferral.entityItemEdit.title,
      content: registeredReferral.entityItemEdit.content,
      params: {
        entityId: itemId
      }
    });
  };

  render() {
    const { status, items, count } = this.dataCollection;
    const {mainStore} = this.props;

    if (status === "LOADING" || mainStore?.isEntityDataLoaded() !== true) {
      return <Spinner />;
    }

    return (
      <div className='narrow-layout'>
        <EntityPermAccessControl entityName={<%= entity.className %>.NAME} operation='create'>
          <div style={{marginBottom: '12px'}}>
            <Button htmlType='button'
                    type='primary'
                    onClick={this.onCrateBtnClick}
                    icon={<PlusOutlined />}>
              <span><FormattedMessage id='common.create'/></span>
            </Button>
          </div>
        </EntityPermAccessControl>

        <List itemLayout="horizontal"
          bordered
          dataSource={items}
          renderItem={item =>
            <List.Item actions={[
                <DeleteOutlined
                      key='delete'
                      onClick={() => this.showDeletionDialog(item)}/>,
                  <EditOutlined onClick={() => this.onEditBtnClick(item.id!)} />
            ]}>
              <div style={{flexGrow: 1}}>
              {this.fields.map(p =>
                <EntityProperty entityName={<%= entity.className %>.NAME}
                                propertyName={p}
                                value={item[p]}
                                key={p}/>
              )}
              </div>
            </List.Item>
        }/>

        {/*
        <div style={{margin: "12px 0 12px 0", float: "right"}}>
          <Paging
            //paginationConfig={paginationConfig}
            //onPagingChange={onPagingChange}
            total={count}
          />
        </div>
        */}
      </div>
    );
  }
}

const <%=listComponentClass%> = injectIntl(<%=listComponentClass%>Component);

export default <%=listComponentClass%>;
