import React from "react";
import {useObserver} from "mobx-react";
import {Link} from "react-router-dom";
import {DeleteOutlined, EditOutlined, PlusOutlined} from '@ant-design/icons';
import {Button, Card} from "antd";
import {EntityInstance, EntityPermAccessControl, toIdString, getFields} from "@haulmont/jmix-react-core";
import {EntityProperty, Paging, Spinner, RetryDialog, useEntityList} from "@haulmont/jmix-react-ui";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {PATH, NEW_SUBPATH} from "./<%= className %>";
import {FormattedMessage} from "react-intl";
import {PaginationConfig} from "antd/es/pagination";
import {gql} from '@apollo/client';

type Props = {
  paginationConfig: PaginationConfig;
  onPagingChange: (current: number, pageSize: number) => void;
};

const <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST = gql`
  query <%= dollarsToUnderscores(entity.name) %>List($limit: Int, $offset: Int, $orderBy: inp_<%= dollarsToUnderscores(entity.name) %>OrderBy, $filter: [inp_<%= dollarsToUnderscores(entity.name) %>FilterCondition]) {
    <%= dollarsToUnderscores(entity.name) %>Count
    <%= dollarsToUnderscores(entity.name) %>List(limit: $limit, offset: $offset, orderBy: $orderBy, filter: $filter) {
        id
        _instanceName
      <% listAttributes.forEach(p => { -%>
        <% if (p.mappingType === 'ASSOCIATION' || p.mappingType === 'COMPOSITION') { -%>
          <%# TODO add support for relation types -%>
        <% } else { -%>
          <%= p.name -%>
        <% } -%>
      <% }) %>
    }
  }
`;

const DELETE_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  mutation Delete_<%= dollarsToUnderscores(entity.name) %>($id: String!) {
    delete_<%= dollarsToUnderscores(entity.name) %>(id: $id)
  }
`;

const <%= listComponentClass %> = (props: Props) => {
  const { paginationConfig, onPagingChange } = props;

  const {
    loadItems,
    listQueryResult: {loading, error, data},
    showDeletionDialog
  } = useEntityList<<%= entity.className %>>({
    listQuery: <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST,
    deleteMutation: DELETE_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    paginationConfig
  });

  return useObserver(() => {
    if (error != null) {
      console.error(error);
      return <RetryDialog onRetry={loadItems} />;
    }

    <%# TODO Spinner is not properly centered -%>
    if (loading || data == null) {
      return <Spinner/>;
    }

    const dataSource = data.<%= dollarsToUnderscores(entity.name) %>List;
    const pagesTotal = data.<%= dollarsToUnderscores(entity.name) %>Count;

    return (
      <div className='narrow-layout'>
        <EntityPermAccessControl entityName={<%= entity.className %>.NAME} operation='create'>
          <div style={{marginBottom: '12px'}}>
            <Link to={PATH + '/' + NEW_SUBPATH}>
              <Button htmlType='button'
                      type='primary'
                      icon={<PlusOutlined />}>
                <span><FormattedMessage id='common.create'/></span>
              </Button>
            </Link>
          </div>
        </EntityPermAccessControl>

        {dataSource == null || dataSource.length === 0 ?
          <p><FormattedMessage id='management.browser.noItems'/></p> : null}
        {dataSource.map((e: EntityInstance<<%= entity.className %>>) =>
          <% /* todo null check of e.id will be removed after we strict id type in https://github.com/cuba-platform/frontend/issues/119 */ %>
          <Card title={e._instanceName}
                key={e.id ? toIdString(e.id) : undefined}
                style={{marginBottom: '12px'}}
                actions={[
                  <EntityPermAccessControl entityName={<%= entity.className %>.NAME} operation='delete'>
                    <DeleteOutlined
                      key='delete'
                      onClick={() => showDeletionDialog(e)}/>
                  </EntityPermAccessControl>,
                  <EntityPermAccessControl entityName={<%= entity.className %>.NAME} operation='update'>
                    <Link to={PATH + '/' + toIdString(e.id!)} key='edit'>
                      <EditOutlined />
                    </Link>
                  </EntityPermAccessControl>
                ]}>
            {getFields(e).map(p =>
              <EntityProperty entityName={<%= entity.className %>.NAME}
                              propertyName={p}
                              value={e[p]}
                              key={p}/>
            )}
          </Card>
        )}

        {!paginationConfig.disabled && (
          <div style={{ margin: "12px 0 12px 0", float: "right" }}>
            <Paging
              paginationConfig={paginationConfig}
              onPagingChange={onPagingChange}
              total={pagesTotal}
            />
          </div>
        )}
      </div>
    );
  });
};

export default <%= listComponentClass %>;
