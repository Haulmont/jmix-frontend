import React, {useMemo} from "react";
import {observer} from "mobx-react";
import {DeleteOutlined, EditOutlined, PlusOutlined, LeftOutlined} from '@ant-design/icons';
import {Button, List, Tooltip} from "antd";
import {EntityInstance, getFields, EntityPermAccessControl} from "@haulmont/jmix-react-core";
import {
  EntityProperty,
  useEntityList,
  EntityListProps,
  registerEntityList
} from "@haulmont/jmix-react-web";
import {
  Paging, 
  Spinner, 
  RetryDialog, 
  useOpenScreenErrorCallback,
  useEntityDeleteCallback, 
  saveHistory
} from "@haulmont/jmix-react-antd";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {FormattedMessage} from "react-intl";
import {gql} from '@apollo/client';
import styles from "<%= relDirShift %>app/App.module.css";

const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST = gql`
  query <%= dollarsToUnderscores(entity.name) %>List($limit: Int, $offset: Int, $orderBy: inp_<%= dollarsToUnderscores(entity.name) %>OrderBy, $filter: [inp_<%= dollarsToUnderscores(entity.name) %>FilterCondition]) {
    <%= dollarsToUnderscores(entity.name) %>Count(filter: $filter)
    <%= dollarsToUnderscores(entity.name) %>List(limit: $limit, offset: $offset, orderBy: $orderBy, filter: $filter) <%= query -%>
  }
`;

const <%= className %> = observer((props: EntityListProps<<%= entity.className %>>) => {
  const { entityList, onEntityListChange, onSelectEntity, disabled: readOnlyMode } = props;
  const onOpenScreenError = useOpenScreenErrorCallback();
  const onEntityDelete = useEntityDeleteCallback();
  const {
    items,
    count,
    executeListQuery,
    listQueryResult: {loading, error},
    handleDeleteBtnClick,
    handleCreateBtnClick,
    handleEditBtnClick,
    handlePaginationChange,
    goToParentScreen,
    entityListState
  } = useEntityList<<%= entity.className %>>({
    listQuery: <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST,
    entityName: ENTITY_NAME,
    routingPath: ROUTING_PATH,
    entityList,
    onEntityListChange,
    onPagination: saveHistory,
    onEntityDelete,
    onOpenScreenError
  });

  const getEntityListActions = useMemo(() => {
    if (readOnlyMode) {
      return () => [];
    }

    return onSelectEntity
      ? (e: EntityInstance<<%= entity.className %>>) => [
          <Button htmlType='button'
            type='primary'
            onClick={() => {
              onSelectEntity(e);
              goToParentScreen();
            }}
          >
            <span><FormattedMessage id='common.selectEntity'/></span>
          </Button>
        ]
      : (e: EntityInstance<<%= entity.className %>>) => [
          <EntityPermAccessControl entityName={ENTITY_NAME} operation='delete'>
            <DeleteOutlined
              role={"button"}
              key='delete'
              onClick={(event?: React.MouseEvent) => handleDeleteBtnClick(event, e.id)}
            />
          </EntityPermAccessControl>,
          <EntityPermAccessControl entityName={ENTITY_NAME} operation='update'>
            <EditOutlined
              role={"button"}
              key="edit"
              onClick={(event?: React.MouseEvent) => handleEditBtnClick(event, e.id)}
            />
          </EntityPermAccessControl>
        ]
  }, [onSelectEntity, handleDeleteBtnClick, handleEditBtnClick, goToParentScreen, readOnlyMode]);

  if (error != null) {
    console.error(error);
    return <RetryDialog onRetry={executeListQuery} />;
  }

  <%# TODO Spinner is not properly centered -%>
  if (loading || items == null) {
    return <Spinner/>;
  }

  return (
    <div className={styles.narrowLayout}>
      <div style={{marginBottom: '12px'}}>

        {(entityList != null || onSelectEntity != null) && (
          <Tooltip title={<FormattedMessage id="common.back" />}>
            <Button
                htmlType="button"
                style={{ margin: "0 12px 12px 0" }}
                icon={<LeftOutlined />}
                onClick={goToParentScreen}
                key="back"
                type="default"
                shape="circle"
            />
          </Tooltip>
        )}

        {onSelectEntity == null && !readOnlyMode && (
          <EntityPermAccessControl entityName={ENTITY_NAME} operation='create'>
            <span>
              <Button htmlType='button'
                      type='primary'
                      icon={<PlusOutlined />}
                      onClick={handleCreateBtnClick}
              >
                <span><FormattedMessage id='common.create'/></span>
              </Button>
            </span>
          </EntityPermAccessControl>
        )}

      </div>

      <List
        itemLayout="horizontal"
        bordered
        dataSource={items}
        renderItem={(item: EntityInstance<<%= entity.className %>>) => (
          <List.Item
            actions={getEntityListActions(item)}
          >
            <div style={{ flexGrow: 1 }}>
              {getFields(item)
                .map(p => (
                  <EntityProperty
                    entityName={ENTITY_NAME}
                    propertyName={p}
                    value={item[p]}
                    key={p}
                  />
              ))}
            </div>
          </List.Item>
        )}
      />

      <div style={{ margin: "12px 0 12px 0", float: "right" }}>
        <Paging
                paginationConfig={entityListState.pagination ?? {}}
                onPagingChange={handlePaginationChange}
                total={count}
        />
      </div>

    </div>
  );
});

registerEntityList({
  component: <%= className %>,
  caption: 'screen.<%= className %>',
  screenId: '<%= className %>',
  entityName: ENTITY_NAME,
  menuOptions: {
    pathPattern: `${ROUTING_PATH}/:entityId?`,
    menuLink: ROUTING_PATH
  }
});

export default <%= className %>;
