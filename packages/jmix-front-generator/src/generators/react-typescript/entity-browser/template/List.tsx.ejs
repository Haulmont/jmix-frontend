import React, {useContext} from "react";
import {observer} from "mobx-react";
import {DeleteOutlined, EditOutlined, PlusOutlined} from '@ant-design/icons';
import {Button, List} from "antd";
import {EntityInstance, getFields, EntityPermAccessControl, ScreensContext} from "@haulmont/jmix-react-core";
import {
  EntityProperty,
  Paging,
  Spinner,
  RetryDialog,
  useEntityList,
  registerEntityBrowserScreen,
  registerRoute,
} from "@haulmont/jmix-react-ui";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {FormattedMessage} from "react-intl";
import {gql} from '@apollo/client';

const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST = gql`
  query <%= dollarsToUnderscores(entity.name) %>List($limit: Int, $offset: Int, $orderBy: inp_<%= dollarsToUnderscores(entity.name) %>OrderBy, $filter: [inp_<%= dollarsToUnderscores(entity.name) %>FilterCondition]) {
    <%= dollarsToUnderscores(entity.name) %>Count
    <%= dollarsToUnderscores(entity.name) %>List(limit: $limit, offset: $offset, orderBy: $orderBy, filter: $filter) <%= query -%>
  }
`;

const DELETE_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  mutation Delete_<%= dollarsToUnderscores(entity.name) %>($id: String!) {
    delete_<%= dollarsToUnderscores(entity.name) %>(id: $id)
  }
`;

const <%= className %> = observer(() => {
  const screens = useContext(ScreensContext);

  const {
    loadItems,
    listQueryResult: {loading, error, data},
    showDeletionDialog,
    handleCreateBtnClick,
    handleEditBtnClick,
    handlePaginationChange,
    store
  } = useEntityList<<%= entity.className %>>({
    listQuery: <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST,
    deleteMutation: DELETE_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    screens,
    entityName: ENTITY_NAME,
    routingPath: ROUTING_PATH
  });

  if (error != null) {
    console.error(error);
    return <RetryDialog onRetry={loadItems} />;
  }

  <%# TODO Spinner is not properly centered -%>
  if (loading || data == null) {
    return <Spinner/>;
  }

  const dataSource = data?.<%= dollarsToUnderscores(entity.name) %>List ?? [];
  const pagesTotal = data?.<%= dollarsToUnderscores(entity.name) %>Count ?? 0;

  return (
    <div className="narrow-layout">
      <EntityPermAccessControl entityName={ENTITY_NAME} operation='create'>
        <div style={{ marginBottom: "12px" }}>
          <Button htmlType="button"
                  type="primary"
                  icon={<PlusOutlined />}
                  onClick={handleCreateBtnClick}
          >
            <span>
              <FormattedMessage id="common.create" />
            </span>
          </Button>
        </div>
      </EntityPermAccessControl>

      <List
        itemLayout="horizontal"
        bordered
        dataSource={dataSource}
        renderItem={(item: EntityInstance<<%= entity.className %>>) => (
          <List.Item
            actions={[
              <EntityPermAccessControl entityName={ENTITY_NAME} operation='delete'>
                <DeleteOutlined
                  key="delete"
                  onClick={showDeletionDialog.bind(null, item)}
                />
              </EntityPermAccessControl>,
              <EntityPermAccessControl entityName={ENTITY_NAME} operation='update'>
                <EditOutlined
                  key="edit"
                  onClick={handleEditBtnClick.bind(null, item.id)}
                />
              </EntityPermAccessControl>,
            ]}
          >
            <div style={{ flexGrow: 1 }}>
              {getFields(item).map(p => (
                <EntityProperty
                  entityName={ENTITY_NAME}
                  propertyName={p}
                  value={item[p]}
                  key={p}
                />
              ))}
            </div>
          </List.Item>
        )}
      />

      <div style={{ margin: "12px 0 12px 0", float: "right" }}>
        <Paging
                paginationConfig={store.pagination ?? {}}
                onPagingChange={handlePaginationChange}
                total={pagesTotal}
        />
      </div>

    </div>
  );
});

registerRoute(
  `${ROUTING_PATH}/:entityId?`,
  ROUTING_PATH,
  '<%= nameLiteral %>',
  <<%= className %> />,
  ENTITY_NAME,
  '<%= className %>'
);
registerEntityBrowserScreen(
  ENTITY_NAME,
  '<%= nameLiteral %>',
  <<%= className %> />
);

export default <%= className %>;
