import React from "react";
import {Form, Button} from "antd";
import { useForm } from "antd/es/form/Form";
import {observer} from "mobx-react";
import {FormattedMessage} from 'react-intl';
import {
  createUseAntdForm,
  createUseAntdFormValidation,
  RetryDialog,
  <% if (attributes.length > 0) { %>
    Field,
  <% } %>
  GlobalErrorsAlert,
  Spinner,
  useMasterDetailEditor,
  useCreateAntdResetForm,
  useEntityPersistCallbacks,
  useSubmitFailedCallback,
  ant_to_jmixFront,
  useChangeConfirm
} from '@haulmont/jmix-react-antd';
import {
  createAntdFormValidationMessages,
  EntityEditorProps,
} from '@haulmont/jmix-react-web'
import { gql } from "@apollo/client";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";

const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= routingPath %>';

const LOAD_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  query <%= dollarsToUnderscores(entity.name) %>ById($id: String = "", $loadItem: Boolean!) {
    <%= dollarsToUnderscores(entity.name) %>ById(id: $id) @include(if: $loadItem) <%= query -%>
    <% Object.keys(associations).forEach(attrName => { %>
      <%= dollarsToUnderscores(associations[attrName].name) %>List {
        id
        _instanceName
      }
    <% }) %>
  }
`;

const UPSERT_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  mutation Upsert_<%= dollarsToUnderscores(entity.name) %>($<%= unCapitalizeFirst(entity.className) %>: inp_<%= dollarsToUnderscores(entity.name) %>!) {
    upsert_<%= dollarsToUnderscores(entity.name) %>(<%= unCapitalizeFirst(entity.className) %>: $<%= unCapitalizeFirst(entity.className) %>) {
      id
    }
  }
`;

const <%= className %> = observer((props: EntityEditorProps<<%= entity.className %>>) => {
  const {
    onCommit,
    entityInstance,
    submitBtnCaption = 'common.submit',
  } = props;
  const [form] = useForm();
  const onSubmitFailed = useSubmitFailedCallback();
  const {setDirty} = useChangeConfirm()

  const fieldComponentProps = {
    onBlur: setDirty
  }

  const {
    <% if (Object.keys(associations).length > 0) { -%>
      relationOptions,
    <% } -%>
    executeLoadQuery,
    loadQueryResult: {
      loading: queryLoading,
      error: queryError,
    },
    upsertMutationResult: {loading: upsertLoading},
    serverValidationErrors,
    intl,
    handleSubmit,
    handleCancelBtnClick,
  } = useMasterDetailEditor<<%= entity.className %>>({
    loadQuery: LOAD_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    upsertMutation: UPSERT_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    entityName: ENTITY_NAME,
    routingPath: ROUTING_PATH,
    onCommit,
    entityInstance,
    useEntityEditorForm: createUseAntdForm(form),
    useEntityEditorFormValidation: createUseAntdFormValidation(form),
    resetEntityEditorForm: useCreateAntdResetForm(form),
    persistEntityCallbacks: useEntityPersistCallbacks(),
    uiKit_to_jmixFront: ant_to_jmixFront
});

  if (queryLoading) {
    return <Spinner />;
  }

  if (queryError != null) {
    console.error(queryError);
    return <RetryDialog onRetry={executeLoadQuery} />;
  }

  return (
    <Form
      onFinish={handleSubmit}
      onFinishFailed={onSubmitFailed}
      layout="vertical"
      form={form}
      validateMessages={createAntdFormValidationMessages(intl)}
    >
      <%- include(includesPath('Fields'), {
        attributes,
        associations,
        fieldProps: {
          componentProps: 'fieldComponentProps'
        }
      }) %>

      <GlobalErrorsAlert serverValidationErrors={serverValidationErrors} />

      <Form.Item style={{textAlign: 'center'}}>
        <Button
          htmlType="button"
          onClick={handleCancelBtnClick}
        >
          <FormattedMessage id='common.cancel'/>
        </Button>
        <Button
          type="primary"
          htmlType="submit"
          <%# disabled={status !== "DONE" && status !== "ERROR"} //TODO client-side validation %>
          loading={upsertLoading}
          style={{marginLeft: '8px'}}
      >
          <FormattedMessage id={submitBtnCaption}/>
        </Button>
      </Form.Item>
    </Form>
  );
});

export default <%= className %>;
