import React from "react";
import {observer} from "mobx-react";
import {Card, Space, Collapse} from "antd";
import {EntityInstance, getFields, toIdString} from "@haulmont/jmix-react-core";
import {
  EntityProperty,
  useEntityList,
  registerScreen
} from "@haulmont/jmix-react-web";
import {
  Paging, 
  Spinner, 
  RetryDialog,
  saveHistory
} from "@haulmont/jmix-react-antd";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {gql} from '@apollo/client';
import styles from "<%= relDirShift %>app/App.module.css";

const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const MAIN_FIELDS = <%- include(includesPath('RenderValue'), {data: mainFields}) %>;

const <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST = gql`
  query <%= dollarsToUnderscores(entity.name) %>List($limit: Int, $offset: Int, $orderBy: inp_<%= dollarsToUnderscores(entity.name) %>OrderBy, $filter: [inp_<%= dollarsToUnderscores(entity.name) %>FilterCondition]) {
    <%= dollarsToUnderscores(entity.name) %>Count(filter: $filter)
    <%= dollarsToUnderscores(entity.name) %>List(limit: $limit, offset: $offset, orderBy: $orderBy, filter: $filter) <%= query -%>
  }
`;

const <%= className %> = observer(() => {
  const {
    items,
    count,
    executeListQuery,
    listQueryResult: {loading, error},
    handlePaginationChange,
    entityListState
  } = useEntityList<<%= entity.className %>>({
    listQuery: <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST,
    entityName: ENTITY_NAME,
    routingPath: ROUTING_PATH,
    onPagination: saveHistory,
  });

  if (error != null) {
    console.error(error);
    return <RetryDialog onRetry={executeListQuery} />;
  }

  <%# TODO Spinner is not properly centered -%>
  if (loading || items == null) {
    return <Spinner/>;
  }

  return (
    <div className={styles.narrowLayout}>
      {items.map((item: EntityInstance<<%= entity.className %>>) =>
        <% /* todo null check of item.id will be removed after we strict id type in https://github.com/cuba-platform/frontend/issues/119 */ %>
        <Card
          title={item._instanceName}
          key={item.id ? toIdString(item.id) : undefined}
          style={{marginBottom: '12px'}}
        >
            <Space direction="vertical" size="large">
              <Space direction="vertical">
                {getFields(item)
                  .filter(fieldName => MAIN_FIELDS.includes(fieldName))
                  .map(fieldName =>(
                    <EntityProperty
                      entityName={ENTITY_NAME}
                      propertyName={fieldName}
                      value={item[fieldName]}
                      key={fieldName}
                    />
                  ))
                }
              </Space>

              <Collapse ghost style={{marginLeft: -16, marginRight: -16}}>
                <Collapse.Panel
                  header="Show details"
                  key="1"
                >
                  {getFields(item)
                    .filter(fieldName => !MAIN_FIELDS.includes(fieldName))
                    .map(fieldName => (
                      <EntityProperty
                        entityName={ENTITY_NAME}
                        propertyName={fieldName}
                        value={item[fieldName]}
                        key={fieldName}
                      />
                    ))
                  }
                </Collapse.Panel>
              </Collapse>
            </Space>
        </Card>
      )}

      <div style={{ margin: "12px 0 12px 0", float: "right" }}>
        <Paging
          paginationConfig={entityListState.pagination ?? {}}
          onPagingChange={handlePaginationChange}
          total={count}
        />
      </div>
    </div>
  );
});

registerScreen({
  component: <%= className %>,
  caption: 'screen.<%= className %>',
  screenId: '<%= className %>',
  menuOptions: {
    pathPattern: ROUTING_PATH,
    menuLink: ROUTING_PATH,
  }
});

export default <%= className %>;
