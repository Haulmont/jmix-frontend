import React, {useCallback} from "react";
import {observer} from "mobx-react";
import {gql, useQuery, useMutation, ApolloCache, Reference} from '@apollo/client';
import {registerEntityList, openEntityEditorScreen} from "@haulmont/jmix-react-ui";
import {useScreens} from "@haulmont/jmix-react-core";
import {DeleteOutlined, EditOutlined, PlusOutlined, LeftOutlined} from '@ant-design/icons';
import {Button, Card, Tooltip, List, Modal} from "antd";
import {FormattedMessage, useIntl} from "react-intl";

const ENTITY_NAME = '<%= entityName %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const <%= toFatSnakeCase(queryName) %> = gql`
  <%= queryString %>
`;

const <%= toFatSnakeCase(deleteMutationName) %> = gql`
  <%= deleteMutationString %>
`;

const <%= className %> = observer(() => {
  const screens = useScreens();
  const intl = useIntl();

  const {loading, error, data} = useQuery(<%= toFatSnakeCase(queryName) %>);
  const [executeDeleteMutation] = useMutation(<%= toFatSnakeCase(deleteMutationName) %>);

  if (loading) {
    return <>'Loading...'</>;
  }

  if (error) {
    return <>'Error :('</>;
  }

  const items = data?.['<%= queryName %>'];

  if (items == null || items.length === 0) {
    return <p><FormattedMessage id='management.browser.noItems'/></p>;
  }

  return (
    <div className="narrow-layout">
      <div style={{marginBottom: '12px'}}>
        <Button htmlType='button'
                type='primary'
                icon={<PlusOutlined />}
                onClick={() => {
                  openEntityEditorScreen({
                    screens,
                    entityName: ENTITY_NAME,
                    intl,
                  });
                }}
        >
          <span><FormattedMessage id='common.create'/></span>
        </Button>
      </div>

      <%# TODO: entity instance typing %>
      {items.map((e: any) =>
        // TODO: id name field
        <Card key={e.id}
              style={{marginBottom: '12px'}}
              actions={[
                <DeleteOutlined key='delete'
                                onClick={() => {
                                  Modal.confirm({
                                    content: intl.formatMessage(
                                      {id: "mvp.management.browser.delete.areYouSure"},
                                    ),
                                    okText: intl.formatMessage({id: "management.browser.delete.ok"}),
                                    cancelText: intl.formatMessage({id: "common.cancel"}),
                                    onOk: () => {
                                      executeDeleteMutation({
                                        variables: {
                                          id: e.id,
                                          // TODO we should probably not use cache by default for simplicity
                                          update(cache: ApolloCache<any>) {
                                            cache.modify({
                                              fields: {
                                                ['<%= queryName %>'](existingRefs, { readField }) {
                                                  return existingRefs.filter(
                                                    (ref: Reference) => e.id !== readField("id", ref)
                                                  );
                                                }
                                              }
                                            });
                                          }
                                        },
                                      });
                                    }
                                  });
                                }}
                />,
                <EditOutlined key="edit"
                              onClick={() => {
                                openEntityEditorScreen({
                                  screens,
                                  entityName: ENTITY_NAME,
                                  intl,
                                  entityIdToLoad: e.id,
                                  routingPath: ROUTING_PATH // TODO: can we get rid of it?
                                });
                              }}
                />
              ]}
        >
          {renderFields(e)}
        </Card>
      )}
    </div>
  );
});

function renderFields(entity: any) {
  return Object.keys(entity).map(p => <div><strong>{p}:</strong> {renderFieldValue(entity, p)}</div>);
}

function renderFieldValue(entity: any, property: string): string {
  return typeof entity[property] === 'object'
    ? JSON.stringify(entity[property])
    : entity[property] as string;
}

registerEntityList({
  component: <%= className %>,
  caption: 'screen.<%= className %>',
  screenId: '<%= className %>',
  entityName: ENTITY_NAME,
  menuOptions: {
    pathPattern: `${ROUTING_PATH}/:entityId?`,
    menuLink: ROUTING_PATH
  }
});

export default <%= className %>;
