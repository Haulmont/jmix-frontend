import React, {useContext} from "react";
import {observer} from "mobx-react";
import {DeleteOutlined, EditOutlined, PlusOutlined} from '@ant-design/icons';
import {Button, Card} from "antd";
import {EntityInstance, getFields, EntityPermAccessControl, toIdString, ScreensContext} from "@haulmont/jmix-react-core";
import {EntityProperty, Paging, Spinner, RetryDialog, useEntityList, defaultPagingConfig} from "@haulmont/jmix-react-ui";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {FormattedMessage} from "react-intl";
import {gql} from '@apollo/client';

const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST = gql`
  query <%= dollarsToUnderscores(entity.name) %>List($limit: Int, $offset: Int, $orderBy: inp_<%= dollarsToUnderscores(entity.name) %>OrderBy, $filter: [inp_<%= dollarsToUnderscores(entity.name) %>FilterCondition]) {
    <%= dollarsToUnderscores(entity.name) %>Count
    <%= dollarsToUnderscores(entity.name) %>List(limit: $limit, offset: $offset, orderBy: $orderBy, filter: $filter) <%= listQuery -%>
  }
`;

const DELETE_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  mutation Delete_<%= dollarsToUnderscores(entity.name) %>($id: String!) {
    delete_<%= dollarsToUnderscores(entity.name) %>(id: $id)
  }
`;

const <%= listComponentClass %> = observer(() => {
  const screens = useContext(ScreensContext);

  const {
    loadItems,
    listQueryResult: {loading, error, data},
    showDeletionDialog,
    handleCreateBtnClick,
    handleEditBtnClick,
    handlePaginationChange,
    store
  } = useEntityList<<%= entity.className %>>({
    listQuery: <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST,
    deleteMutation: DELETE_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    screens,
    entityName: ENTITY_NAME,
    routingPath: ROUTING_PATH,
  });

  if (error != null) {
    console.error(error);
    return <RetryDialog onRetry={loadItems} />;
  }

  <%# TODO Spinner is not properly centered -%>
  if (loading || data == null) {
    return <Spinner/>;
  }

  const dataSource = data?.<%= dollarsToUnderscores(entity.name) %>List ?? [];
  const pagesTotal = data?.<%= dollarsToUnderscores(entity.name) %>Count ?? 0;

  return (
    <div className='narrow-layout'>
      <EntityPermAccessControl entityName={ENTITY_NAME} operation='create'>
        <div style={{marginBottom: '12px'}}>
          <Button htmlType='button'
                  type='primary'
                  icon={<PlusOutlined />}
                  onClick={handleCreateBtnClick}
          >
            <span><FormattedMessage id='common.create'/></span>
          </Button>
        </div>
      </EntityPermAccessControl>

      {dataSource == null || dataSource.length === 0 ?
        <p><FormattedMessage id='management.browser.noItems'/></p> : null}
      {dataSource.map((e: EntityInstance<<%= entity.className %>>) =>
        <% /* todo null check of e.id will be removed after we strict id type in https://github.com/cuba-platform/frontend/issues/119 */ %>
        <Card title={e._instanceName}
              key={e.id ? toIdString(e.id) : undefined}
              style={{marginBottom: '12px'}}
              actions={[
                <EntityPermAccessControl entityName={ENTITY_NAME} operation='delete'>
                  <DeleteOutlined
                    key='delete'
                    onClick={showDeletionDialog.bind(null, e)}
                  />
                </EntityPermAccessControl>,
                <EntityPermAccessControl entityName={ENTITY_NAME} operation='update'>
                  <EditOutlined
                    key="edit"
                    onClick={handleEditBtnClick.bind(null, e.id)}
                  />
                </EntityPermAccessControl>
              ]}>
          {getFields(e).map(p =>
            <EntityProperty entityName={ENTITY_NAME}
                            propertyName={p}
                            value={e[p]}
                            key={p}/>
          )}
        </Card>
      )}

      <div style={{ margin: "12px 0 12px 0", float: "right" }}>
      <Paging
              paginationConfig={store.pagination ?? {}}
              onPagingChange={handlePaginationChange}
              total={pagesTotal}
      />
      </div>

    </div>
  );
});

export default <%= listComponentClass %>;
