import React, {useContext} from "react";
import {Form, Alert, Button, Card} from "antd";
import { useForm } from "antd/es/form/Form";
import {observer} from "mobx-react";
import {toJS} from "mobx";
import {FormattedMessage} from 'react-intl';
import {
  createUseAntdForm,
  createUseAntdFormValidation,
  RetryDialog,
  <% if (attributes.length > 0) { %>
    Field,
  <% } %>
  GlobalErrorsAlert,
  Spinner,
  useEntityPersistCallbacks,
  useSubmitFailedCallback,
  ant_to_jmixFront
} from "@haulmont/jmix-react-antd";
import {
  createAntdFormValidationMessages,
  useEntityEditor,
  EntityEditorProps,
  registerEntityEditor
} from "@haulmont/jmix-react-web";
import { gql } from "@apollo/client";
import styles from "<%= relDirShift %>app/App.module.css";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";

const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const LOAD_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  query <%= dollarsToUnderscores(entity.name) %>ById($id: String = "", $loadItem: Boolean!) {
    <%= dollarsToUnderscores(entity.name) %>ById(id: $id) @include(if: $loadItem) <%= query -%>
    <% Object.keys(associations).forEach(attrName => { %>
      <%= dollarsToUnderscores(associations[attrName].name) %>List {
        id
        _instanceName
      }
    <% }) %>
  }
`;

const UPSERT_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  mutation Upsert_<%= dollarsToUnderscores(entity.name) %>($<%= unCapitalizeFirst(entity.className) %>: inp_<%= dollarsToUnderscores(entity.name) %>!) {
    upsert_<%= dollarsToUnderscores(entity.name) %>(<%= unCapitalizeFirst(entity.className) %>: $<%= unCapitalizeFirst(entity.className) %>) {
      id
    }
  }
`;

const <%= className %> = observer((props: EntityEditorProps<<%= entity.className %>>) => {
  const {
    onCommit,
    entityInstance,
    submitBtnCaption = "common.submit"
  } = props;
  const [form] = useForm();
  const onSubmitFailed = useSubmitFailedCallback();
  const {
    <% if (Object.keys(associations).length > 0) { -%>
      relationOptions,
    <% } -%>
    executeLoadQuery,
    loadQueryResult: {
      loading: queryLoading,
      error: queryError,
    },
    upsertMutationResult: {loading: upsertLoading},
    serverValidationErrors,
    intl,
    handleSubmit,
    handleCancelBtnClick,
  } = useEntityEditor<<%= entity.className %>>({
    loadQuery: LOAD_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    upsertMutation: UPSERT_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    entityName: ENTITY_NAME,
    routingPath: ROUTING_PATH,
    onCommit,
    entityInstance,
    persistEntityCallbacks: useEntityPersistCallbacks(),
    uiKit_to_jmixFront: ant_to_jmixFront,
    useEntityEditorForm: createUseAntdForm(form),
    useEntityEditorFormValidation: createUseAntdFormValidation(form)
  });

  if (queryLoading) {
    return <Spinner />;
  }

  if (queryError != null) {
    console.error(queryError);
    return <RetryDialog onRetry={executeLoadQuery} />;
  }

  return (
    <Card className={styles.narrowLayout}>
      <Form
        onFinish={handleSubmit}
        onFinishFailed={onSubmitFailed}
        layout="vertical"
        form={form}
        validateMessages={createAntdFormValidationMessages(intl)}
      >
        <%- include(includesPath('Fields'), {
          attributes,
          associations,
          fieldProps: {}
        }) %>

        <GlobalErrorsAlert serverValidationErrors={serverValidationErrors} />

        <Form.Item style={{textAlign: 'center'}}>
          <Button htmlType="button"
                  onClick={handleCancelBtnClick}
          >
            <FormattedMessage id='common.cancel'/>
          </Button>
          <Button type="primary"
                  htmlType="submit"
                  <%# disabled={status !== "DONE" && status !== "ERROR"} //TODO client-side validation %>
                  loading={upsertLoading}
                  style={{marginLeft: '8px'}}>
            <FormattedMessage id={submitBtnCaption}/>
          </Button>
        </Form.Item>
      </Form>
    </Card>
  );
});

registerEntityEditor({
  component: <%= className %>,
  caption: 'screen.<%= className %>',
  screenId: '<%= className %>',
  entityName: ENTITY_NAME,
  menuOptions: {
    pathPattern: ROUTING_PATH,
    menuLink: ROUTING_PATH,
  }
});

export default <%= className %>;
