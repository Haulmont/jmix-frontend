import React, {useContext} from "react";
import {Form, Alert, Button, Card} from "antd";
import {observer} from "mobx-react";
import {toJS} from "mobx";
import {FormattedMessage} from 'react-intl';
import {useMetadata, ScreensContext} from "@haulmont/jmix-react-core";
import {
  createAntdFormValidationMessages,
  RetryDialog,
  <% if (attributes.length > 0) { %>
    Field,
  <% } %>
  MultilineText,
  Spinner,
  useEntityEditor,
  EntityEditorProps,
  MultiScreenContext,
  registerEntityEditorScreen
} from '@haulmont/jmix-react-ui';
import { gql } from "@apollo/client";
import "<%= relDirShift %>app/App.css";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";

const ENTITY_NAME = '<%= entity.name %>';
const UPSERT_INPUT_NAME = '<%= unCapitalizeFirst(entity.className) %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const LOAD_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  query <%= dollarsToUnderscores(entity.name) %>ById($id: String = "", $loadItem: Boolean!) {
    <%= dollarsToUnderscores(entity.name) %>ById(id: $id) @include(if: $loadItem) <%= query -%>
    <% Object.keys(associations).forEach(attrName => { %>
      <%= dollarsToUnderscores(associations[attrName].name) %>List {
        id
        _instanceName
      }
    <% }) %>
  }
`;

const UPSERT_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  mutation Upsert_<%= dollarsToUnderscores(entity.name) %>($<%= unCapitalizeFirst(entity.className) %>: inp_<%= dollarsToUnderscores(entity.name) %>!) {
    upsert_<%= dollarsToUnderscores(entity.name) %>(<%= unCapitalizeFirst(entity.className) %>: $<%= unCapitalizeFirst(entity.className) %>) {
      id
    }
  }
`;

const <%= className %> = observer((props: EntityEditorProps<<%= entity.className %>>) => {
  const {
    onCommit,
    entityInstance,
    submitBtnCaption = 'common.submit',
    hiddenAttributes
  } = props;
  const multiScreen = useContext(MultiScreenContext);
  const screens = useContext(ScreensContext);
  const metadata = useMetadata();

  const {
    executeLoadQuery,
    loadQueryResult: {
      loading: queryLoading,
      error: queryError,
      <% if (Object.keys(associations).length > 0) { -%>
        data,
      <% } -%>
    },
    upsertMutationResult: {loading: upsertLoading},
    store,
    form,
    intl,
    handleFinish,
    handleFinishFailed,
    handleCancelBtnClick,
  } = useEntityEditor<<%= entity.className %>>({
    loadQuery: LOAD_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    upsertMutation: UPSERT_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    entityId: multiScreen?.params?.entityId,
    entityName: ENTITY_NAME,
    upsertInputName: UPSERT_INPUT_NAME,
    routingPath: ROUTING_PATH,
    <% if (Object.keys(associations).length > 0) { -%>
      hasAssociations: true,
    <% } -%>
    screens,
    multiScreen,
    onCommit,
    entityInstance,
});

  if (queryLoading || metadata == null) {
    return <Spinner />;
  }

  if (queryError != null) {
    console.error(queryError);
    return <RetryDialog onRetry={executeLoadQuery} />;
  }

  return (
    <Card className="narrow-layout">
      <Form
        onFinish={handleFinish}
        onFinishFailed={handleFinishFailed}
        layout="vertical"
        form={form}
        validateMessages={createAntdFormValidationMessages(intl)}
      >
        <% attributes.forEach(attr => { %>
          <Field entityName={ENTITY_NAME}
                 propertyName="<%= attr.name %>"
                 hide={hiddenAttributes?.includes('<%= attr.name %>')}

            <% if (readOnlyFields.includes(attr.name)) { %>
                 disabled={true}
            <% } else if (attr.name === locals.stringIdName) { %>
                 disabled={!isNewEntity(entityId)}
            <% } %>

            <% if (Object.keys(associations).includes(attr.name)) { %>
                 associationOptions={data?.<%= dollarsToUnderscores(associations[attr.name].name) %>List}
            <% } %>

                  formItemProps={{
                  style: {marginBottom: "12px"},
            <% if (attr.mandatory) { -%>
                  rules: [{required: true}],
            <% } -%>
            <% if (attr.type && attr.type.fqn === 'java.lang.Boolean') { -%>
                  valuePropName: "checked",
            <% } -%>
            }}
          /> <%# end Field %>
        <% }) %>

        {store.globalErrors.length > 0 && (
          <Alert
            message={<MultilineText lines={toJS(store.globalErrors)} />}
            type="error"
            style={{ marginBottom: "24px" }}
          />
        )}

        <Form.Item style={{textAlign: 'center'}}>
          <Button htmlType="button"
                  onClick={handleCancelBtnClick}
          >
            <FormattedMessage id='common.cancel'/>
          </Button>
          <Button type="primary"
                  htmlType="submit"
                  <%# disabled={status !== "DONE" && status !== "ERROR"} //TODO client-side validation %>
                  loading={upsertLoading}
                  style={{marginLeft: '8px'}}>
            <FormattedMessage id={submitBtnCaption}/>
          </Button>
        </Form.Item>
      </Form>
    </Card>
  );
});

registerEntityEditorScreen(
  ENTITY_NAME,
  '<%= nameLiteral %>',
  <<%= className %> />
);

export default <%= className %>;
