import * as React from "react";
import {Form, Alert, Button, Card, message} from "antd";
import {FormInstance} from "antd/es/form";
import {observer} from "mobx-react";
import {IReactionDisposer, observable, reaction, toJS, makeObservable} from "mobx";
import {FormattedMessage, injectIntl, WrappedComponentProps} from 'react-intl';
import {defaultHandleFinish, createAntdFormValidationMessages, MultiScreenContext} from '@haulmont/jmix-react-ui';
import {Screens, ScreensContext, IMultiScreenItem, redirect} from "@haulmont/jmix-react-core";

import {
<% if (Object.keys(editAssociations).length > 0) { %>
  loadAssociationOptions,
  DataCollectionStore,
<% } %>
  instance, MainStoreInjected, injectMainStore
} from "@haulmont/jmix-react-core";

import {
<% if (editAttributes.length > 0) { %>
  Field,
<% } %>
  MultilineText,
  Spinner
} from "@haulmont/jmix-react-ui";

import "<%= relDirShift %>app/App.css";

<% relationImports.forEach(relationImport =>{ -%>
  import {<%= relationImport.className %>} from "<%= relDirShift %><%= relationImport.path %>";
<% }) %>

interface I<%= editComponentClass %>ComponentProps {
  screens: Screens;
}

type Props = MainStoreInjected;

// const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

class <%= editComponentClass %>Component extends React.Component<Props & WrappedComponentProps & I<%= editComponentClass %>ComponentProps> {
  static contextType = MultiScreenContext;
  context: IMultiScreenItem = null!;

  dataInstance = instance<<%= entity.className %>>(<%= entity.className %>.NAME, {
    view: '<%= editView.name %>',
    loadImmediately: false,
    <% if (locals.stringIdName != null) { -%>
      stringIdName: '<%= stringIdName %>'
    <% } -%>
  });

  <% Object.entries(editAssociations).forEach(([attrName, nestedEntity]) => { %>
    <%= attrName %>sDc: DataCollectionStore<<%= nestedEntity.className %>> | null = null;
  <% }) %>

  updated = false;
  formRef: React.RefObject<FormInstance> = React.createRef();
  reactionDisposers: IReactionDisposer[] = [];

  fields = [
  <% editAttributes.forEach(p => { -%>
    '<%= p.name %>',
  <% }) %>
  ];

  globalErrors: string[] = [];

  <% if (Object.keys(editAssociations).length > 0) { %>
  /**
  * This method should be called after the user permissions has been loaded
  */
  loadAssociationOptions = () => {
    // MainStore should exist at this point
    if (this.props.mainStore != null) {
      const {getAttributePermission} = this.props.mainStore.security;
      <% Object.entries(editAssociations).forEach(([attrName, nestedEntity]) => { %>
        this.<%= attrName %>sDc = loadAssociationOptions(
          <%= entity.className %>.NAME, '<%= attrName %>', <%= nestedEntity.className %>.NAME, getAttributePermission, { view: "_minimal" }
        ) ?? null;
      <% }) %>
    }
  };
  <% } %>

  handleFinishFailed = () => {
    const {intl} = this.props;
    message.error(intl.formatMessage({id: "management.editor.validationError"}));
  };

  handleFinish = (values: {[field: string]: any}) => {
    const {intl} = this.props;

    if (this.formRef.current != null) {
      defaultHandleFinish(
        values, this.dataInstance, intl, this.formRef.current, this.isNewEntity() ? 'create' : 'edit'
      ).then(({success, globalErrors}) => {
        if (success) {
          this.updated = true;
        } else {
          this.globalErrors = globalErrors;
        }
      });
    }
  };

  isNewEntity = () => {
    return this.context?.params?.entityId === undefined;
  };

  onCancelBtnClick = () => {
    if (this.props.screens.currentScreenIndex === 1) {
      redirect(ROUTING_PATH);
    }
    this.props.screens.setActiveScreen(this.context.parent!, true);
  };

  constructor(props) {
    super(props);

    makeObservable(this, {
      <% Object.entries(editAssociations).forEach(([attrName]) => { %>
        <%= attrName %>sDc: observable,
      <% }) %>
      updated: observable,
      formRef: observable,
      globalErrors: observable
    });
  }

  render() {
    const {status, lastError, load} = this.dataInstance;
    const {mainStore, intl} = this.props;
    if (mainStore == null || !mainStore.isEntityDataLoaded()) {
      return <Spinner/>;
    }

    // do not stop on "COMMIT_ERROR" - it could be bean validation, so we should show fields with errors
    if (status === "ERROR" && lastError === "LOAD_ERROR") {
      return <>
        <FormattedMessage id="common.requestFailed" />.
        <br/><br/>
        <Button htmlType="button"
                onClick={() => load(this.context?.params?.entityId!)}>
          <FormattedMessage id="common.retry" />
        </Button>
        </>;
    }

    return (
      <Card className='narrow-layout'>
        <Form onFinish={this.handleFinish}
              onFinishFailed={this.handleFinishFailed}
              layout='vertical'
              ref={this.formRef}
              validateMessages={createAntdFormValidationMessages(intl)}
        >

          <% editAttributes.forEach(attr => { %>
            <Field entityName={<%= entity.className %>.NAME}
                   propertyName="<%= attr.name %>"

              <% if (readOnlyFields.includes(attr.name)) { %>
                disabled={true}
              <% } else if (attr.name === locals.stringIdName) { %>
                disabled={!this.isNewEntity()}
              <% } %>

              <% if (Object.keys(editCompositions).includes(attr.name)) { %>
                   <% if (typeof nestedEntityInfo !== 'undefined' && typeof nestedEntityInfo[attr.name] !== 'undefined') {%>
                        nestedEntityView='<%= nestedEntityInfo[attr.name] %>'
                   <% } %>
                   parentEntityInstanceId={this.context?.params?.entityId}
              <% } %>

              <% if (Object.keys(editAssociations).includes(attr.name)) { %>
                   optionsContainer={this.<%= attr.name %>sDc ?? undefined}
              <% } %>

                   formItemProps={{
                     style: {marginBottom: "12px"},
                   <% if (attr.mandatory) { -%>
                     rules: [{required: true}],
                   <% } -%>
                   <% if (attr.type && attr.type.fqn === 'java.lang.Boolean') { -%>
                     valuePropName: "checked",
                   <% } -%>
                   }}
            /> <%# end Field %>
          <% }) %>


          {this.globalErrors.length > 0 && (
            <Alert
              message={<MultilineText lines={toJS(this.globalErrors)} />}
              type="error"
              style={{ marginBottom: "24px" }}
            />
          )}

          <Form.Item style={{textAlign: 'center'}}>
            <Button htmlType='button' onClick={this.onCancelBtnClick}>
              <FormattedMessage id='common.cancel' />
            </Button>
            <Button type="primary"
                    htmlType="submit"
                    disabled={status !== "DONE" && status !== "ERROR"}
                    loading={status === "LOADING"}
                    style={{marginLeft: '8px'}}>
              <FormattedMessage id='common.submit'/>
            </Button>
          </Form.Item>
        </Form>
      </Card>
    );
  }

  componentDidMount() {
    if (this.isNewEntity()) {
      this.dataInstance.setItem(new <%= entity.className %>());
    } else {
      this.dataInstance.load(this.context?.params?.entityId!);
    }

    this.reactionDisposers.push(
      reaction(
        () => this.dataInstance.status,
        () => {
          const { intl } = this.props;
          if (this.dataInstance.lastError != null && this.dataInstance.lastError !== 'COMMIT_ERROR') {
            message.error(intl.formatMessage({ id: "common.requestFailed" }));
          }
        }
      )
    );

    <% if (Object.keys(editAssociations).length > 0) { %>
      this.reactionDisposers.push(reaction(
        () => this.props.mainStore?.security.isDataLoaded,
        (isDataLoaded, _prevIsDataLoaded, permsReaction) => {
          if (isDataLoaded === true) {
            // User permissions has been loaded.
            // We can now load association options.
            this.loadAssociationOptions(); // Calls REST API
            permsReaction.dispose();
          }
        },
        { fireImmediately: true }
      ));
    <% } %>

    this.reactionDisposers.push(reaction(
      () => this.formRef.current,
      (formRefCurrent, _prevFormRefCurrent, formRefReaction) => {
        if (formRefCurrent != null) {
          // The Form has been successfully created.
          // It is now safe to set values on Form fields.
          this.reactionDisposers.push( reaction(
            () => this.dataInstance.item,
            () => {
              formRefCurrent.setFieldsValue(
                this.dataInstance.getFieldValues(this.fields)
              );
            },
            {fireImmediately: true}
          ));
          formRefReaction.dispose();
        }
      },
      {fireImmediately: true}
    ));
  }

  componentWillUnmount() {
    this.reactionDisposers.forEach(dispose => dispose());
  }

}

const <%=editComponentClass%> = injectIntl(
  injectMainStore(
    observer(
      <%= editComponentClass %>Component
    )
  )
);

export default observer(() => {
  const screens = React.useContext(ScreensContext);

  return <<%=editComponentClass%> screens={screens} />
});
