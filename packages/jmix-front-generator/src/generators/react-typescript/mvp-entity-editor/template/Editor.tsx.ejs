import React, {useEffect, useCallback} from "react";
import { gql, useQuery, useMutation } from "@apollo/client";
import {
  Form,
  Button,
  Card,
  message,
  <% if (hasStringScalars || hasCustomScalars) { %>
    Input,
  <% } %>
  <% if (hasIntScalars || hasFloatScalars) { %>
    InputNumber,
  <% } %>
  <% if (hasBooleanScalars) { %>
    Checkbox,
  <% } %>
  <% if (hasEnumScalars) { %>
    Select,
  <% } %>
} from "antd";
import { useForm } from "antd/es/form/Form";
import {observer} from "mobx-react";
import {FormattedMessage, useIntl} from 'react-intl';
import {useMultiScreen, useParentScreen, registerEntityEditor} from '@haulmont/jmix-react-ui';


const ENTITY_NAME = '<%= entityName %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const <%= toFatSnakeCase(queryName) %> = gql`
  <%= queryString %>
`;

const <%= toFatSnakeCase(mutationName) %> = gql`
  <%= mutationString %>
`;

const <%= className %> = observer(() => {
  const multiScreen = useMultiScreen();
  const [form] = useForm();
  const intl = useIntl();

  const id = multiScreen?.params?.entityId;

  // TODO: id variable name
  const {loading: queryLoading, error: queryError, data} = useQuery(<%= toFatSnakeCase(queryName) %>, {
    variables: {
      id
    }
  });

  const goToParentScreen = useParentScreen(ROUTING_PATH);
  const handleCancel = useCallback(() => {
    goToParentScreen();
    window.scrollTo(0, 0);
  }, [goToParentScreen]);

  const [executeUpsertMutation] = useMutation(<%= toFatSnakeCase(mutationName) %>);

  const handleSubmit = useCallback((values) => {
    executeUpsertMutation({
      variables: {
        <%= inputVariableName %>: values
      }
    });
    goToParentScreen();
    window.scrollTo(0, 0);
    message.success('Saved successfully'); // TODO i18n
  }, [executeUpsertMutation]);

  const handleSubmitFailed = useCallback(() => {
    message.error(intl.formatMessage({id: 'management.editor.validationError'}));
  }, [intl]);

  const item = data?.['<%= queryName %>'];

  useEffect(() => {
    if (item != null) {
      form.setFieldsValue(item);
    }
  }, [item, form]);

  if (queryLoading) {
    return <>'Loading...'</>;
  }

  if (queryError) {
    return <>'Error :('</>;
  }

  if (item == null) {
    return <p>No data</p>;
  }

  return (
    <Card className="narrow-layout">
        <Form onFinish={handleSubmit}
              onFinishFailed={handleSubmitFailed}
              layout="vertical"
              form={form}
        >

          <% attributes.forEach((attr) => { %>
            <Form.Item name={'<%= attr.name %>'}
                       label={'<%= attr.name %>'}
            >
              <%- include(includesPath('MvpFormField'), {attr: attr}) %>
            </Form.Item>
          <% }) %>

          <Form.Item style={{textAlign: 'center'}}>
            <Button htmlType="button"
                    onClick={handleCancel}
            >
              <FormattedMessage id='common.cancel'/>
            </Button>
            <Button type="primary"
                    htmlType="submit"
                    loading={false} // TODO
                    style={{marginLeft: '8px'}}
            >
              <FormattedMessage id={'common.submit'}/>
            </Button>
          </Form.Item>

        </Form>
    </Card>
  );
});

registerEntityEditor({
  component: <%= className %>,
  caption: 'screen.<%= className %>',
  screenId: '<%= className %>',
  entityName: ENTITY_NAME,
  menuOptions: {
    pathPattern: `${ROUTING_PATH}/:entityId?`,
    menuLink: ROUTING_PATH
  }
});

export default <%= className %>;

