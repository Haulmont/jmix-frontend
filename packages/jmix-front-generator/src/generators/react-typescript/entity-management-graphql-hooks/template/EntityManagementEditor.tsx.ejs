import React from "react";
import {Form, Alert, Button, Card} from "antd";
import {useObserver} from "mobx-react";
import {PATH, NEW_SUBPATH} from "./<%= className %>";
import {Link, Redirect} from "react-router-dom";
import {toJS} from "mobx";
import {FormattedMessage} from 'react-intl';
import {
  createAntdFormValidationMessages,
  RetryDialog,
  <% if (editAttributes.length > 0) { %>
    Field,
  <% } %>
  MultilineText,
  Spinner,
  useEntityEditor
} from '@haulmont/jmix-react-ui';
import { gql } from "@apollo/client";
import "<%= relDirShift %>app/App.css";
import {<%= relationImports[0].className %>} from "<%= relDirShift %><%= relationImports[0].path %>";
<% /* -%>
<% relationImports.forEach(relationImport =>{ -%>
import {<%= relationImport.className %>} from "<%= relDirShift %><%= relationImport.path %>";
<% }) %>
<% */ -%>

type Props = {
  entityId: string;
};

function isNewEntity(entityId: string) {
  return entityId === NEW_SUBPATH;
}

const LOAD_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  query <%= dollarsToUnderscores(entity.name) %>ById($id: String!) {
    <%= dollarsToUnderscores(entity.name) %>ById(id: $id) {
      _instanceName
      id
      <% editAttributes.forEach(p => { -%>
        <% if (p.mappingType === 'ASSOCIATION' || p.mappingType === 'COMPOSITION') { -%>
        <% } else { -%>
          <%= p.name -%>
        <% } -%>
      <% }) %>
    }

    <%# TODO support relation types -%>
    <% /* %>
    <% editAssociatedEntityClassNames.forEach(nestedEntityClassName => { -%>
      <%= unCapitalizeFirst(nestedEntityClassName) %>List {
        id
        instanceName
      }
    <% }) %>
    <% */ %>
  }
`;

const UPSERT_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  mutation Upsert_<%= dollarsToUnderscores(entity.name) %>($<%= unCapitalizeFirst(entity.className) %>: inp_<%= dollarsToUnderscores(entity.name) %>!) {
    upsert_<%= dollarsToUnderscores(entity.name) %>(<%= unCapitalizeFirst(entity.className) %>: $<%= unCapitalizeFirst(entity.className) %>) {
      id
    }
  }
`;

const <%= editComponentClass %> = (props: Props) => {
  const { entityId } = props;

  const {
    loadItem,
    loadQueryResult: {loading: queryLoading, error: queryError},
    upsertMutationResult: {loading: upsertLoading},
    store,
    form,
    intl,
    handleFinish,
    handleFinishFailed,
    metadata
  } = useEntityEditor({
    loadQuery: LOAD_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    upsertMutation: UPSERT_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    entityId,
    queryName: '<%= dollarsToUnderscores(entity.name) %>ById',
    entityName: <%= entity.className %>.NAME,
    isNewEntity: isNewEntity(entityId)
  });

  return useObserver(() => {
    if (store.updated) {
      return <Redirect to={PATH} />;
    }

    if (queryLoading || metadata == null) {
      return <Spinner />;
    }

    if (queryError != null) {
      console.error(queryError);
      return <RetryDialog onRetry={loadItem} />;
    }

    return (
      <Card className="narrow-layout">
        <Form
          onFinish={handleFinish}
          onFinishFailed={handleFinishFailed}
          layout="vertical"
          ref={store.formRef}
          form={form}
          validateMessages={createAntdFormValidationMessages(intl)}
        >
          <% editAttributes.forEach(attr => { %>
            <Field entityName={<%= entity.className %>.NAME}
                   propertyName="<%= attr.name %>"

              <% if (readOnlyFields.includes(attr.name)) { %>
                   disabled={true}
              <% } else if (attr.name === locals.stringIdName) { %>
                   disabled={!isNewEntity(entityId)}
              <% } %>

              <% if (Object.keys(editCompositions).includes(attr.name)) { %>
                <% if (typeof nestedEntityInfo !== 'undefined' && typeof nestedEntityInfo[attr.name] !== 'undefined') {%>
                   nestedEntityView='<%= nestedEntityInfo[attr.name] %>'
                <% } %>
                   parentEntityInstanceId={entityId !== NEW_SUBPATH ? entityId : undefined}
              <% } %>

              <% /* TODO Associations %>
              <% if (Object.keys(editAssociations).includes(attr.name)) { %>
                   associationOptions={<%= unCapitalizeFirst(entity.className) %>Data.<%= unCapitalizeFirst(editAssociations[attr.name].className) %>List}
              <% } %>
              <% */ %>

                    formItemProps={{
                    style: {marginBottom: "12px"},
              <% if (attr.mandatory) { -%>
                    rules: [{required: true}],
              <% } -%>
              <% if (attr.type && attr.type.fqn === 'java.lang.Boolean') { -%>
                    valuePropName: "checked",
              <% } -%>
              }}
            /> <%# end Field %>
          <% }) %>

          {store.globalErrors.length > 0 && (
            <Alert
              message={<MultilineText lines={toJS(store.globalErrors)} />}
              type="error"
              style={{ marginBottom: "24px" }}
            />
          )}

          <Form.Item style={{textAlign: 'center'}}>
            <Link to={PATH}>
              <Button htmlType="button">
                <FormattedMessage id='common.cancel'/>
              </Button>
            </Link>
            <Button type="primary"
                    htmlType="submit"
                    <%# disabled={status !== "DONE" && status !== "ERROR"} //TODO client-side validation %>
                    loading={upsertLoading}
                    style={{marginLeft: '8px'}}>
              <FormattedMessage id='common.submit'/>
            </Button>
          </Form.Item>
        </Form>
      </Card>
    );
  });
};

export default <%= editComponentClass %>;
