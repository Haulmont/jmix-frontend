import React, {useEffect, useCallback} from "react";
import {useObserver} from "mobx-react";
import {Link} from "react-router-dom";
import {DeleteOutlined, EditOutlined, PlusOutlined} from '@ant-design/icons';
import {Modal, Button, List, message} from "antd";
import {EntityPermAccessControl} from "@haulmont/jmix-react-core";
import {EntityProperty, Paging} from "@haulmont/jmix-react-ui";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {SerializedEntity} from "@haulmont/jmix-rest";
import {PATH, NEW_SUBPATH} from "./<%= className %>";
import {FormattedMessage, useIntl} from "react-intl";
import {PaginationConfig} from "antd/es/pagination";
import {gql, useMutation, Reference, useLazyQuery} from '@apollo/client';
import {CenteredLoader} from '../CenteredLoader';

type Props = {
  paginationConfig: PaginationConfig;
  onPagingChange: (current: number, pageSize: number) => void;
};

const <%= entity.className.toUpperCase() %>_LIST = gql`
  query <%= entity.className %>List($filter: GroupCondition, $limit: Int, $offset: Int, $sort: String) {
    <%= entity.className.toLowerCase() %>Count
    <%= entity.className.toLowerCase() %>List(filter: $filter, limit: $limit, offset: $offset, sort: $sort) {
      instanceName
      id
      <% listAttributes.forEach(p => { -%>
        <%= p.name %>
      <% }) %>
    }
  }
`;

const DELETE_<%= entity.className.toUpperCase() %> = gql`
  mutation Delete<%= entity.className %>($id: String!) {
    delete<%= entity.className %>(id: $id)
  }
`;

const <%= listComponentClass %> = (props: Props) => {
  const { paginationConfig, onPagingChange } = props;

  const intl = useIntl();

  const [doFetch, {loading, error, data}] = useLazyQuery(<%= entity.className.toUpperCase() %>_LIST);
  const [delete<%= entity.className %>] = useMutation(DELETE_<%= entity.className.toUpperCase() %>);

  useEffect(() => {
    doFetch({
      variables: toLimitAndOffset(paginationConfig)
    });
  }, [paginationConfig, doFetch]);

  const showDeletionDialog = useCallback(
    (e: SerializedEntity<<%= entity.className %>>) => {
      Modal.confirm({
        title: intl.formatMessage(
          { id: "management.browser.delete.areYouSure" },
          <%# // TODO instanceName will become _instanceName %>
          { instanceName: (e as any).instanceName }
        ),
      okText: intl.formatMessage({
        id: "management.browser.delete.ok"
      }),
      cancelText: intl.formatMessage({ id: "common.cancel" }),
        onOk: () => {
          if (e.id != null) {
            delete<%= entity.className %>({
              variables: {id: e.id},
              update(cache) {
                cache.modify({
                  fields: {
                    <%= entity.className.toLowerCase() %>List(existingRefs, { readField }) {
                      return existingRefs.filter(
                        (ref: Reference) => e.id !== readField('id', ref)
                      );
                    }
                  }
                })
              }
            });
          }
        }
      });
    },
    [intl, delete<%= entity.className %>]
  );

  return useObserver(() => {
    if (loading || data == null) {
      return <CenteredLoader/>;
    }

    if (error != null) {
      console.error(error);
      message.error(intl.formatMessage({ id: "common.requestFailed" }));
    }

    return (
      <div className="narrow-layout">
        <div style={{ marginBottom: "12px" }}>
          <Link to={PATH + "/" + NEW_SUBPATH}>
            <Button htmlType="button" type="primary" icon={<PlusOutlined />}>
              <span>
                <FormattedMessage id="common.create" />
              </span>
            </Button>
          </Link>
        </div>

        <List
          itemLayout="horizontal"
          bordered
          dataSource={data.<%= entity.className.toLowerCase() %>List}
          renderItem={(item: SerializedEntity<<%= entity.className %>>) => (
            <List.Item
              actions={[
                <DeleteOutlined
                  key="delete"
                  onClick={() => showDeletionDialog(item)}
                />,
                <Link to={PATH + "/" + item.id} key="edit">
                  <EditOutlined />
                </Link>
              ]}
            >
              <div style={{ flexGrow: 1 }}>
                {getFields(item, false).map((p => (
                  <EntityProperty
                    entityName={<%= entity.className %>.NAME}
                    propertyName={p}
                    value={item[p]}
                    key={p}
                  />
                )))}
              </div>
            </List.Item>
          )}
        />

        {!paginationConfig.disabled && (
          <div style={{ margin: "12px 0 12px 0", float: "right" }}>
            <Paging
              paginationConfig={paginationConfig}
              onPagingChange={onPagingChange}
              total={data.<%= entity.className.toLowerCase() %>Count}
            />
          </div>
        )}
      </div>
    );
  });
};

function toLimitAndOffset(paginationConfig: PaginationConfig): {limit: number | undefined, offset: number | undefined} {
  const {disabled, current, pageSize} = paginationConfig;

  if (disabled) {
    return {
      limit: undefined,
      offset: undefined
    };
  }

  if (pageSize != null && current != null) {
    return {
      limit: pageSize,
      offset: pageSize * (current - 1)
    }
  }

  return {
    limit: undefined,
    offset: undefined
  };
}

export function getFields(item: SerializedEntity<<%= entity.className %>>, isStringEntity: boolean): string[] {
  <%# // TODO instanceName will become _instanceName %>
  const ignoredProperties = ['__typename', 'instanceName'];
  if (!isStringEntity) {
    ignoredProperties.push('id');
  }
  return Object.keys(item)
    .filter(key => !ignoredProperties.includes(key));
}

export default <%= listComponentClass %>;
