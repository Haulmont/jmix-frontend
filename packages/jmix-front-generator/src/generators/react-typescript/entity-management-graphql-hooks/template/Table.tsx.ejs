import React from "react";
import {useObserver} from "mobx-react";
import {Link} from "react-router-dom";
import {PlusOutlined} from '@ant-design/icons';
import {Button} from "antd";
import {EntityPermAccessControl, useMainStore} from "@haulmont/jmix-react-core";
import {DataTable, Spinner, RetryDialog, useEntityTable} from "@haulmont/jmix-react-ui";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {PATH, NEW_SUBPATH} from "./<%= className %>";
import {FormattedMessage} from "react-intl";
import {PaginationConfig} from "antd/es/pagination";
import {gql} from '@apollo/client';

type Props = {
  paginationConfig: PaginationConfig;
  onPagingChange: (current: number, pageSize: number) => void;
};

const FIELDS = [
<% listAttributes.forEach(p => { -%>
  '<%= p.name %>',
<% }) %>
];

const <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST = gql`
query <%= dollarsToUnderscores(entity.name) %>List($limit: Int, $offset: Int, $orderBy: inp_<%= dollarsToUnderscores(entity.name) %>OrderBy, $filter: [inp_<%= dollarsToUnderscores(entity.name) %>FilterCondition]) {
    <%= dollarsToUnderscores(entity.name) %>Count
    <%= dollarsToUnderscores(entity.name) %>List(limit: $limit, offset: $offset, orderBy: $orderBy, filter: $filter) {
  id
  _instanceName
  <% listAttributes.forEach(p => { -%>
  <% if (p.mappingType === 'ASSOCIATION' || p.mappingType === 'COMPOSITION') { -%>
  <%# TODO add support for relation types -%>
  <% } else { -%>
  <%= p.name -%>
    <% } -%>
  <% }) %>
}
}
`;

const DELETE_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
mutation Delete_<%= dollarsToUnderscores(entity.name) %>($id: String!) {
  delete_<%= dollarsToUnderscores(entity.name) %>(id: $id)
}
`;

const <%= listComponentClass %> = (props: Props) => {
  const { paginationConfig, onPagingChange } = props;

  const mainStore = useMainStore();

  const {
    loadItems,
    listQueryResult: {loading, error, data},
    handleRowSelectionChange,
    deleteSelectedRow,
    selectedRowKey
  } = useEntityTable<<%= entity.className %>>({
    listQuery: <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST,
    deleteMutation: DELETE_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    paginationConfig,
    queryName: '<%= dollarsToUnderscores(entity.name) %>'
  });

  return useObserver(() => {
    if (error != null) {
      console.error(error);
      return <RetryDialog onRetry={loadItems} />;
    }

    <%# TODO Spinner is not properly centered -%>
    if (loading || data == null || !mainStore.isEntityDataLoaded()) {
      return <Spinner />;
    }

    const items = data.<%= dollarsToUnderscores(entity.name) %>;

    const buttons = [
      (<EntityPermAccessControl entityName={<%= entity.className %>.NAME} operation='create' key='create'>
        <Link
          to={PATH + "/" + NEW_SUBPATH}
          key="create"
        >
          <Button
            htmlType="button"
            style={{ margin: "0 12px 12px 0" }}
            type="primary"
            icon={<PlusOutlined />}
          >
            <span>
              <FormattedMessage id="common.create" />
            </span>
          </Button>
        </Link>
      </EntityPermAccessControl>),
      (<EntityPermAccessControl entityName={<%= entity.className %>.NAME} operation='update' key='update'>
        <Link to={PATH + "/" + selectedRowKey} key="edit">
          <Button
            htmlType="button"
            style={{ margin: "0 12px 12px 0" }}
            disabled={selectedRowKey == null}
            type="default"
          >
            <FormattedMessage id="common.edit" />
          </Button>
        </Link>
      </EntityPermAccessControl>),
      (<EntityPermAccessControl entityName={<%= entity.className %>.NAME} operation='delete' key='delete'>
        <Button
          htmlType="button"
          style={{ margin: "0 12px 12px 0" }}
          disabled={selectedRowKey == null}
          onClick={deleteSelectedRow}
          key="remove"
          type="default"
        >
          <FormattedMessage id="common.remove" />
        </Button>
      </EntityPermAccessControl>),
    ];

    return (
      <DataTable
        items={items}
        columnDefinitions={FIELDS}
        onRowSelectionChange={handleRowSelectionChange}
        hideSelectionColumn={true}
        buttons={buttons}
      />
    );
  });
}

export default <%= listComponentClass %>;