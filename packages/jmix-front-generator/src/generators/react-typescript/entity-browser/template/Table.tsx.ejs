import React, {useContext} from "react";
import {observer} from "mobx-react";
import {PlusOutlined, LeftOutlined} from '@ant-design/icons';
import {Button, Tooltip} from "antd";
import {EntityPermAccessControl, ScreensContext} from "@haulmont/jmix-react-core";
import {
  DataTable,
  RetryDialog,
  useEntityList,
  EntityListProps,
  registerEntityBrowserScreen,
  registerRoute,
} from "@haulmont/jmix-react-ui";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {FormattedMessage} from "react-intl";
import {gql} from '@apollo/client';

const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST = gql`
  query <%= dollarsToUnderscores(entity.name) %>List($limit: Int, $offset: Int, $orderBy: inp_<%= dollarsToUnderscores(entity.name) %>OrderBy, $filter: [inp_<%= dollarsToUnderscores(entity.name) %>FilterCondition], $loadItems: Boolean!) {
    <%= dollarsToUnderscores(entity.name) %>Count
    <%= dollarsToUnderscores(entity.name) %>List(limit: $limit, offset: $offset, orderBy: $orderBy, filter: $filter) @include(if: $loadItems) <%= query %>
    <% Object.keys(relations).forEach(attrName => { %>
      <%= dollarsToUnderscores(relations[attrName].name) %>List {
      id
      _instanceName
      }
    <% }) %>
  }
`;

const DELETE_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
mutation Delete_<%= dollarsToUnderscores(entity.name) %>($id: String!) {
  delete_<%= dollarsToUnderscores(entity.name) %>(id: $id)
}
`;

const <%= className %> = observer((props: EntityListProps<<%= entity.className %>>) => {
  const {entityList, onEntityListChange, reverseAttrName} = props;
  const screens = useContext(ScreensContext);

  const {
    items,
    count,
    relationOptions,
    executeListQuery,
    listQueryResult: {loading, error},
    handleRowSelectionChange,
    handleFilterChange,
    handleSortOrderChange,
    handlePaginationChange,
    deleteSelectedRow,
    handleCreateBtnClick,
    handleEditBtnClick,
    goToParentScreen,
    store,
  } = useEntityList<<%= entity.className %>>({
    listQuery: <%= dollarsToUnderscores(entity.name).toUpperCase() %>_LIST,
    deleteMutation: DELETE_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
    screens,
    currentScreen: screens.currentScreen,
    entityName: ENTITY_NAME,
    routingPath: ROUTING_PATH,
    entityList,
    onEntityListChange,
    reverseAttrName,
  });

  if (error != null) {
    console.error(error);
    return <RetryDialog onRetry={executeListQuery} />;
  }

  const buttons = [
    (<EntityPermAccessControl entityName={ENTITY_NAME} operation='create' key='create'>
      <Button
        htmlType="button"
        style={{ margin: "0 12px 12px 0" }}
        type="primary"
        icon={<PlusOutlined />}
        onClick={handleCreateBtnClick}
      >
        <span>
          <FormattedMessage id="common.create" />
        </span>
      </Button>
    </EntityPermAccessControl>),
    (<EntityPermAccessControl entityName={ENTITY_NAME} operation='update' key='update'>
      <Button
        htmlType="button"
        style={{ margin: "0 12px 12px 0" }}
        disabled={store.selectedRowKey == null}
        type="default"
        onClick={handleEditBtnClick.bind(null, store.selectedRowKey)}
      >
        <FormattedMessage id="common.edit" />
      </Button>
    </EntityPermAccessControl>),
    (<EntityPermAccessControl entityName={ENTITY_NAME} operation='delete' key='delete'>
      <Button
        htmlType="button"
        style={{ margin: "0 12px 12px 0" }}
        disabled={store.selectedRowKey == null}
        onClick={deleteSelectedRow.bind(null, items)}
        key="remove"
        type="default"
      >
        <FormattedMessage id="common.remove" />
      </Button>
    </EntityPermAccessControl>)
  ];

  if (entityList != null) {
    buttons.unshift(
      <Tooltip title={<FormattedMessage id="common.back" />}>
        <Button
          htmlType="button"
          style={{ margin: "0 12px 12px 0" }}
          icon={<LeftOutlined />}
          onClick={goToParentScreen}
          key="back"
          type="default"
          shape="circle"
        />
      </Tooltip>
    );
  }

  return (
    <DataTable
      items={items}
      count={count}
      relationOptions={relationOptions}
      current={store.pagination?.current}
      pageSize={store.pagination?.pageSize}
      entityName={ENTITY_NAME}
      loading={loading}
      error={error}
      enableFiltersOnColumns={entityList != null ? [] : undefined}
      enableSortingOnColumns={entityList != null ? [] : undefined}
      columnDefinitions={[
        <% attributes.forEach(p => { -%>
          '<%= p.name %>',
        <% }) %>
      ].filter(columnDef => columnDef !== reverseAttrName)}
      onRowSelectionChange={handleRowSelectionChange}
      onFilterChange={handleFilterChange}
      onSortOrderChange={handleSortOrderChange}
      onPaginationChange={handlePaginationChange}
      hideSelectionColumn={true}
      buttons={buttons}
    />
  );
});

registerRoute(
  `${ROUTING_PATH}/:entityId?`,
  ROUTING_PATH,
  '<%= nameLiteral %>',
  <<%= className %> />,
  ENTITY_NAME,
  '<%= className %>'
);
registerEntityBrowserScreen(
  ENTITY_NAME,
  '<%= nameLiteral %>',
  <<%= className %> />
);

export default <%= className %>;
