import {
    <% if (attributes.length > 0) { %>
        Field,
    <% } %>
    FormWizardManager,
    FormWizardStep,
    FormWizardStepStatus,
    Spinner,
    RetryDialog,
    EntityEditorProps,
    MultiScreenContext,
    GlobalErrorsAlert,
    useEntityEditorFromWizard,
    registerEntityEditor,
    withFormWizardProvider,
    createAntdFormValidationMessages,
    FormWizardButtons,
} from '@haulmont/jmix-react-ui';
import {Card} from 'antd';
import { observer } from 'mobx-react';
import React, { useContext } from 'react';
import gql from 'graphql-tag';
import styles from "<%= relDirShift %>app/App.module.css";
import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";

const ENTITY_NAME = '<%= entity.name %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const LOAD_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  query <%= dollarsToUnderscores(entity.name) %>ById($id: String = "", $loadItem: Boolean!) {
    <%= dollarsToUnderscores(entity.name) %>ById(id: $id) @include(if: $loadItem) <%= query -%>
    <% Object.keys(associations).forEach(attrName => { %>
      <%= dollarsToUnderscores(associations[attrName].name) %>List {
        id
        _instanceName
      }
    <% }) %>
  }
`;

const UPSERT_<%= dollarsToUnderscores(entity.name).toUpperCase() %> = gql`
  mutation Upsert_<%= dollarsToUnderscores(entity.name) %>($<%= unCapitalizeFirst(entity.className) %>: inp_<%= dollarsToUnderscores(entity.name) %>!) {
    upsert_<%= dollarsToUnderscores(entity.name) %>(<%= unCapitalizeFirst(entity.className) %>: $<%= unCapitalizeFirst(entity.className) %>) {
      id
    }
  }
`;

const <%= className %> = withFormWizardProvider(observer((props: EntityEditorProps<<%= entity.className %>>) => {
    const {entityInstance} = props;
    const multiScreen = useContext(MultiScreenContext);

    const {
        intl,
        executeLoadQuery,
        loadQueryResult: { loading: queryLoading, error: queryError, data },
        handleSubmit,
        handleSubmitBtn,
        serverValidationErrors,
        handleSubmitFailed,
        handleCancelBtnClick,
        handleNextStep,
        handlePreviousStep,
        handleSelectStep,
        <% if (Object.keys(associations).length > 0) { -%>
            relationOptions,
        <% } -%>
    } = useEntityEditorFromWizard({
        loadQuery: LOAD_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
        upsertMutation: UPSERT_<%= dollarsToUnderscores(entity.name).toUpperCase() %>,
        entityId: multiScreen?.params?.entityId,
        entityName: ENTITY_NAME,
        routingPath: ROUTING_PATH,
        entityInstance
    });

    if (queryLoading) {
        return <Spinner />;
    }
    
    if (queryError != null) {
        console.error(queryError);
        return <RetryDialog onRetry={executeLoadQuery} />;
    }

    return (
        <Card className={styles.narrowLayout}>
            <FormWizardManager
                onFinish={handleSubmit}
                onFinishFailed={handleSubmitFailed}
                validateMessages={createAntdFormValidationMessages(intl)}
            >
                <FormWizardStepStatus onSelectStep={handleSelectStep} />

                <% steps.forEach(step => { %>
                    <FormWizardStep
                        stepName="<%= step.name %>"
                        fieldNames={<%- include(includesPath('RenderValue'), { data: step.fieldNames }) %>}
                    >
                        <%- include(includesPath('Fields'), {
                            attributes: step.attributes,
                            associations,
                        }) %>
                    </FormWizardStep>
                <% }) %>

                <GlobalErrorsAlert serverValidationErrors={serverValidationErrors} />

                <FormWizardButtons
                    onNextStep={handleNextStep}
                    onPreviousStep={handlePreviousStep}
                    onSubmit={handleSubmitBtn}
                    onCancel={handleCancelBtnClick}
                />
            </FormWizardManager>
        </Card>
    )
}))

registerEntityEditor({
    component: <%= className %>,
    caption: 'screen.<%= className %>',
    screenId: '<%= className %>',
    entityName: ENTITY_NAME,
    menuOptions: {
      pathPattern: ROUTING_PATH,
      menuLink: ROUTING_PATH,
    }
  });

export default <%= className %>;
